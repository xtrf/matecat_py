# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompletionStatusItemProjectStatusRevise(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'password': 'str',
        'completed': 'bool',
        'completed_at': 'datetime',
        'event_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'password': 'password',
        'completed': 'completed',
        'completed_at': 'completed_at',
        'event_id': 'event_id'
    }

    def __init__(self, id=None, password=None, completed=None, completed_at=None, event_id=None):  # noqa: E501
        """CompletionStatusItemProjectStatusRevise - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._password = None
        self._completed = None
        self._completed_at = None
        self._event_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if password is not None:
            self.password = password
        if completed is not None:
            self.completed = completed
        if completed_at is not None:
            self.completed_at = completed_at
        if event_id is not None:
            self.event_id = event_id

    @property
    def id(self):
        """Gets the id of this CompletionStatusItemProjectStatusRevise.  # noqa: E501


        :return: The id of this CompletionStatusItemProjectStatusRevise.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompletionStatusItemProjectStatusRevise.


        :param id: The id of this CompletionStatusItemProjectStatusRevise.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def password(self):
        """Gets the password of this CompletionStatusItemProjectStatusRevise.  # noqa: E501


        :return: The password of this CompletionStatusItemProjectStatusRevise.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CompletionStatusItemProjectStatusRevise.


        :param password: The password of this CompletionStatusItemProjectStatusRevise.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def completed(self):
        """Gets the completed of this CompletionStatusItemProjectStatusRevise.  # noqa: E501


        :return: The completed of this CompletionStatusItemProjectStatusRevise.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this CompletionStatusItemProjectStatusRevise.


        :param completed: The completed of this CompletionStatusItemProjectStatusRevise.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    @property
    def completed_at(self):
        """Gets the completed_at of this CompletionStatusItemProjectStatusRevise.  # noqa: E501


        :return: The completed_at of this CompletionStatusItemProjectStatusRevise.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this CompletionStatusItemProjectStatusRevise.


        :param completed_at: The completed_at of this CompletionStatusItemProjectStatusRevise.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def event_id(self):
        """Gets the event_id of this CompletionStatusItemProjectStatusRevise.  # noqa: E501


        :return: The event_id of this CompletionStatusItemProjectStatusRevise.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this CompletionStatusItemProjectStatusRevise.


        :param event_id: The event_id of this CompletionStatusItemProjectStatusRevise.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompletionStatusItemProjectStatusRevise, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompletionStatusItemProjectStatusRevise):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
