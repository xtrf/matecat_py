# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'password': 'str',
        'name': 'str',
        'id_team': 'int',
        'id_assignee': 'int',
        'create_date': 'datetime',
        'project_slug': 'str',
        'features': 'str',
        'is_cancelled': 'bool',
        'is_archived': 'bool',
        'remote_file_service': 'str',
        'jobs': 'list[ExtendedJob]'
    }

    attribute_map = {
        'id': 'id',
        'password': 'password',
        'name': 'name',
        'id_team': 'id_team',
        'id_assignee': 'id_assignee',
        'create_date': 'create_date',
        'project_slug': 'project_slug',
        'features': 'features',
        'is_cancelled': 'is_cancelled',
        'is_archived': 'is_archived',
        'remote_file_service': 'remote_file_service',
        'jobs': 'jobs'
    }

    def __init__(self, id=None, password=None, name=None, id_team=None, id_assignee=None, create_date=None, project_slug=None, features=None, is_cancelled=None, is_archived=None, remote_file_service=None, jobs=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._password = None
        self._name = None
        self._id_team = None
        self._id_assignee = None
        self._create_date = None
        self._project_slug = None
        self._features = None
        self._is_cancelled = None
        self._is_archived = None
        self._remote_file_service = None
        self._jobs = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if password is not None:
            self.password = password
        if name is not None:
            self.name = name
        if id_team is not None:
            self.id_team = id_team
        if id_assignee is not None:
            self.id_assignee = id_assignee
        if create_date is not None:
            self.create_date = create_date
        if project_slug is not None:
            self.project_slug = project_slug
        if features is not None:
            self.features = features
        if is_cancelled is not None:
            self.is_cancelled = is_cancelled
        if is_archived is not None:
            self.is_archived = is_archived
        if remote_file_service is not None:
            self.remote_file_service = remote_file_service
        if jobs is not None:
            self.jobs = jobs

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def password(self):
        """Gets the password of this Project.  # noqa: E501


        :return: The password of this Project.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Project.


        :param password: The password of this Project.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id_team(self):
        """Gets the id_team of this Project.  # noqa: E501


        :return: The id_team of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id_team

    @id_team.setter
    def id_team(self, id_team):
        """Sets the id_team of this Project.


        :param id_team: The id_team of this Project.  # noqa: E501
        :type: int
        """

        self._id_team = id_team

    @property
    def id_assignee(self):
        """Gets the id_assignee of this Project.  # noqa: E501


        :return: The id_assignee of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id_assignee

    @id_assignee.setter
    def id_assignee(self, id_assignee):
        """Sets the id_assignee of this Project.


        :param id_assignee: The id_assignee of this Project.  # noqa: E501
        :type: int
        """

        self._id_assignee = id_assignee

    @property
    def create_date(self):
        """Gets the create_date of this Project.  # noqa: E501


        :return: The create_date of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Project.


        :param create_date: The create_date of this Project.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def project_slug(self):
        """Gets the project_slug of this Project.  # noqa: E501


        :return: The project_slug of this Project.  # noqa: E501
        :rtype: str
        """
        return self._project_slug

    @project_slug.setter
    def project_slug(self, project_slug):
        """Sets the project_slug of this Project.


        :param project_slug: The project_slug of this Project.  # noqa: E501
        :type: str
        """

        self._project_slug = project_slug

    @property
    def features(self):
        """Gets the features of this Project.  # noqa: E501


        :return: The features of this Project.  # noqa: E501
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Project.


        :param features: The features of this Project.  # noqa: E501
        :type: str
        """

        self._features = features

    @property
    def is_cancelled(self):
        """Gets the is_cancelled of this Project.  # noqa: E501


        :return: The is_cancelled of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        """Sets the is_cancelled of this Project.


        :param is_cancelled: The is_cancelled of this Project.  # noqa: E501
        :type: bool
        """

        self._is_cancelled = is_cancelled

    @property
    def is_archived(self):
        """Gets the is_archived of this Project.  # noqa: E501


        :return: The is_archived of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this Project.


        :param is_archived: The is_archived of this Project.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def remote_file_service(self):
        """Gets the remote_file_service of this Project.  # noqa: E501


        :return: The remote_file_service of this Project.  # noqa: E501
        :rtype: str
        """
        return self._remote_file_service

    @remote_file_service.setter
    def remote_file_service(self, remote_file_service):
        """Sets the remote_file_service of this Project.


        :param remote_file_service: The remote_file_service of this Project.  # noqa: E501
        :type: str
        """

        self._remote_file_service = remote_file_service

    @property
    def jobs(self):
        """Gets the jobs of this Project.  # noqa: E501


        :return: The jobs of this Project.  # noqa: E501
        :rtype: list[ExtendedJob]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this Project.


        :param jobs: The jobs of this Project.  # noqa: E501
        :type: list[ExtendedJob]
        """

        self._jobs = jobs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
