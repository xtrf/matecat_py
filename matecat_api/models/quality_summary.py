# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QualitySummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'equivalent_class': 'int',
        'quality_overall': 'str',
        'errors_count': 'int',
        'revise_issues': 'QualitySummaryReviseIssues'
    }

    attribute_map = {
        'equivalent_class': 'equivalent_class',
        'quality_overall': 'quality_overall',
        'errors_count': 'errors_count',
        'revise_issues': 'revise_issues'
    }

    def __init__(self, equivalent_class=None, quality_overall=None, errors_count=None, revise_issues=None):  # noqa: E501
        """QualitySummary - a model defined in Swagger"""  # noqa: E501
        self._equivalent_class = None
        self._quality_overall = None
        self._errors_count = None
        self._revise_issues = None
        self.discriminator = None
        if equivalent_class is not None:
            self.equivalent_class = equivalent_class
        if quality_overall is not None:
            self.quality_overall = quality_overall
        if errors_count is not None:
            self.errors_count = errors_count
        if revise_issues is not None:
            self.revise_issues = revise_issues

    @property
    def equivalent_class(self):
        """Gets the equivalent_class of this QualitySummary.  # noqa: E501


        :return: The equivalent_class of this QualitySummary.  # noqa: E501
        :rtype: int
        """
        return self._equivalent_class

    @equivalent_class.setter
    def equivalent_class(self, equivalent_class):
        """Sets the equivalent_class of this QualitySummary.


        :param equivalent_class: The equivalent_class of this QualitySummary.  # noqa: E501
        :type: int
        """

        self._equivalent_class = equivalent_class

    @property
    def quality_overall(self):
        """Gets the quality_overall of this QualitySummary.  # noqa: E501


        :return: The quality_overall of this QualitySummary.  # noqa: E501
        :rtype: str
        """
        return self._quality_overall

    @quality_overall.setter
    def quality_overall(self, quality_overall):
        """Sets the quality_overall of this QualitySummary.


        :param quality_overall: The quality_overall of this QualitySummary.  # noqa: E501
        :type: str
        """

        self._quality_overall = quality_overall

    @property
    def errors_count(self):
        """Gets the errors_count of this QualitySummary.  # noqa: E501


        :return: The errors_count of this QualitySummary.  # noqa: E501
        :rtype: int
        """
        return self._errors_count

    @errors_count.setter
    def errors_count(self, errors_count):
        """Sets the errors_count of this QualitySummary.


        :param errors_count: The errors_count of this QualitySummary.  # noqa: E501
        :type: int
        """

        self._errors_count = errors_count

    @property
    def revise_issues(self):
        """Gets the revise_issues of this QualitySummary.  # noqa: E501


        :return: The revise_issues of this QualitySummary.  # noqa: E501
        :rtype: QualitySummaryReviseIssues
        """
        return self._revise_issues

    @revise_issues.setter
    def revise_issues(self, revise_issues):
        """Sets the revise_issues of this QualitySummary.


        :param revise_issues: The revise_issues of this QualitySummary.  # noqa: E501
        :type: QualitySummaryReviseIssues
        """

        self._revise_issues = revise_issues

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualitySummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualitySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
