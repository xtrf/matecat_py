# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body13(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'speech2text': 'bool',
        'tag_projection': 'bool',
        'lexiqa': 'bool'
    }

    attribute_map = {
        'speech2text': 'speech2text',
        'tag_projection': 'tag_projection',
        'lexiqa': 'lexiqa'
    }

    def __init__(self, speech2text=None, tag_projection=None, lexiqa=None):  # noqa: E501
        """Body13 - a model defined in Swagger"""  # noqa: E501
        self._speech2text = None
        self._tag_projection = None
        self._lexiqa = None
        self.discriminator = None
        if speech2text is not None:
            self.speech2text = speech2text
        if tag_projection is not None:
            self.tag_projection = tag_projection
        if lexiqa is not None:
            self.lexiqa = lexiqa

    @property
    def speech2text(self):
        """Gets the speech2text of this Body13.  # noqa: E501

        To enable Speech To Text option  # noqa: E501

        :return: The speech2text of this Body13.  # noqa: E501
        :rtype: bool
        """
        return self._speech2text

    @speech2text.setter
    def speech2text(self, speech2text):
        """Sets the speech2text of this Body13.

        To enable Speech To Text option  # noqa: E501

        :param speech2text: The speech2text of this Body13.  # noqa: E501
        :type: bool
        """

        self._speech2text = speech2text

    @property
    def tag_projection(self):
        """Gets the tag_projection of this Body13.  # noqa: E501

        To enable Guess Tags option  # noqa: E501

        :return: The tag_projection of this Body13.  # noqa: E501
        :rtype: bool
        """
        return self._tag_projection

    @tag_projection.setter
    def tag_projection(self, tag_projection):
        """Sets the tag_projection of this Body13.

        To enable Guess Tags option  # noqa: E501

        :param tag_projection: The tag_projection of this Body13.  # noqa: E501
        :type: bool
        """

        self._tag_projection = tag_projection

    @property
    def lexiqa(self):
        """Gets the lexiqa of this Body13.  # noqa: E501

        To enable lexiqa option  # noqa: E501

        :return: The lexiqa of this Body13.  # noqa: E501
        :rtype: bool
        """
        return self._lexiqa

    @lexiqa.setter
    def lexiqa(self, lexiqa):
        """Sets the lexiqa of this Body13.

        To enable lexiqa option  # noqa: E501

        :param lexiqa: The lexiqa of this Body13.  # noqa: E501
        :type: bool
        """

        self._lexiqa = lexiqa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body13, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body13):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
