# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Segment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_segment': 'int',
        'autopropagated_from': 'str',
        'status': 'str',
        'translation': 'str',
        'translation_date': 'str',
        'match_type': 'str',
        'context_hash': 'str',
        'locked': 'int',
        'version_number': 'int',
        'issues': 'list[Issue]'
    }

    attribute_map = {
        'id_segment': 'id_segment',
        'autopropagated_from': 'autopropagated_from',
        'status': 'status',
        'translation': 'translation',
        'translation_date': 'translation_date',
        'match_type': 'match_type',
        'context_hash': 'context_hash',
        'locked': 'locked',
        'version_number': 'version_number',
        'issues': 'issues'
    }

    def __init__(self, id_segment=None, autopropagated_from=None, status=None, translation=None, translation_date=None, match_type=None, context_hash=None, locked=None, version_number=None, issues=None):  # noqa: E501
        """Segment - a model defined in Swagger"""  # noqa: E501
        self._id_segment = None
        self._autopropagated_from = None
        self._status = None
        self._translation = None
        self._translation_date = None
        self._match_type = None
        self._context_hash = None
        self._locked = None
        self._version_number = None
        self._issues = None
        self.discriminator = None
        if id_segment is not None:
            self.id_segment = id_segment
        if autopropagated_from is not None:
            self.autopropagated_from = autopropagated_from
        if status is not None:
            self.status = status
        if translation is not None:
            self.translation = translation
        if translation_date is not None:
            self.translation_date = translation_date
        if match_type is not None:
            self.match_type = match_type
        if context_hash is not None:
            self.context_hash = context_hash
        if locked is not None:
            self.locked = locked
        if version_number is not None:
            self.version_number = version_number
        if issues is not None:
            self.issues = issues

    @property
    def id_segment(self):
        """Gets the id_segment of this Segment.  # noqa: E501


        :return: The id_segment of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._id_segment

    @id_segment.setter
    def id_segment(self, id_segment):
        """Sets the id_segment of this Segment.


        :param id_segment: The id_segment of this Segment.  # noqa: E501
        :type: int
        """

        self._id_segment = id_segment

    @property
    def autopropagated_from(self):
        """Gets the autopropagated_from of this Segment.  # noqa: E501


        :return: The autopropagated_from of this Segment.  # noqa: E501
        :rtype: str
        """
        return self._autopropagated_from

    @autopropagated_from.setter
    def autopropagated_from(self, autopropagated_from):
        """Sets the autopropagated_from of this Segment.


        :param autopropagated_from: The autopropagated_from of this Segment.  # noqa: E501
        :type: str
        """

        self._autopropagated_from = autopropagated_from

    @property
    def status(self):
        """Gets the status of this Segment.  # noqa: E501


        :return: The status of this Segment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Segment.


        :param status: The status of this Segment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def translation(self):
        """Gets the translation of this Segment.  # noqa: E501


        :return: The translation of this Segment.  # noqa: E501
        :rtype: str
        """
        return self._translation

    @translation.setter
    def translation(self, translation):
        """Sets the translation of this Segment.


        :param translation: The translation of this Segment.  # noqa: E501
        :type: str
        """

        self._translation = translation

    @property
    def translation_date(self):
        """Gets the translation_date of this Segment.  # noqa: E501


        :return: The translation_date of this Segment.  # noqa: E501
        :rtype: str
        """
        return self._translation_date

    @translation_date.setter
    def translation_date(self, translation_date):
        """Sets the translation_date of this Segment.


        :param translation_date: The translation_date of this Segment.  # noqa: E501
        :type: str
        """

        self._translation_date = translation_date

    @property
    def match_type(self):
        """Gets the match_type of this Segment.  # noqa: E501


        :return: The match_type of this Segment.  # noqa: E501
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this Segment.


        :param match_type: The match_type of this Segment.  # noqa: E501
        :type: str
        """

        self._match_type = match_type

    @property
    def context_hash(self):
        """Gets the context_hash of this Segment.  # noqa: E501


        :return: The context_hash of this Segment.  # noqa: E501
        :rtype: str
        """
        return self._context_hash

    @context_hash.setter
    def context_hash(self, context_hash):
        """Sets the context_hash of this Segment.


        :param context_hash: The context_hash of this Segment.  # noqa: E501
        :type: str
        """

        self._context_hash = context_hash

    @property
    def locked(self):
        """Gets the locked of this Segment.  # noqa: E501


        :return: The locked of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Segment.


        :param locked: The locked of this Segment.  # noqa: E501
        :type: int
        """

        self._locked = locked

    @property
    def version_number(self):
        """Gets the version_number of this Segment.  # noqa: E501


        :return: The version_number of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this Segment.


        :param version_number: The version_number of this Segment.  # noqa: E501
        :type: int
        """

        self._version_number = version_number

    @property
    def issues(self):
        """Gets the issues of this Segment.  # noqa: E501


        :return: The issues of this Segment.  # noqa: E501
        :rtype: list[Issue]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this Segment.


        :param issues: The issues of this Segment.  # noqa: E501
        :type: list[Issue]
        """

        self._issues = issues

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Segment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Segment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
