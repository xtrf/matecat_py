# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QualitySummaryReviseIssues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'typing': 'ReviseIssue',
        'translation': 'ReviseIssue',
        'terminology': 'ReviseIssue',
        'language_quality': 'ReviseIssue',
        'style': 'ReviseIssue'
    }

    attribute_map = {
        'typing': 'typing',
        'translation': 'translation',
        'terminology': 'terminology',
        'language_quality': 'language_quality',
        'style': 'style'
    }

    def __init__(self, typing=None, translation=None, terminology=None, language_quality=None, style=None):  # noqa: E501
        """QualitySummaryReviseIssues - a model defined in Swagger"""  # noqa: E501
        self._typing = None
        self._translation = None
        self._terminology = None
        self._language_quality = None
        self._style = None
        self.discriminator = None
        if typing is not None:
            self.typing = typing
        if translation is not None:
            self.translation = translation
        if terminology is not None:
            self.terminology = terminology
        if language_quality is not None:
            self.language_quality = language_quality
        if style is not None:
            self.style = style

    @property
    def typing(self):
        """Gets the typing of this QualitySummaryReviseIssues.  # noqa: E501


        :return: The typing of this QualitySummaryReviseIssues.  # noqa: E501
        :rtype: ReviseIssue
        """
        return self._typing

    @typing.setter
    def typing(self, typing):
        """Sets the typing of this QualitySummaryReviseIssues.


        :param typing: The typing of this QualitySummaryReviseIssues.  # noqa: E501
        :type: ReviseIssue
        """

        self._typing = typing

    @property
    def translation(self):
        """Gets the translation of this QualitySummaryReviseIssues.  # noqa: E501


        :return: The translation of this QualitySummaryReviseIssues.  # noqa: E501
        :rtype: ReviseIssue
        """
        return self._translation

    @translation.setter
    def translation(self, translation):
        """Sets the translation of this QualitySummaryReviseIssues.


        :param translation: The translation of this QualitySummaryReviseIssues.  # noqa: E501
        :type: ReviseIssue
        """

        self._translation = translation

    @property
    def terminology(self):
        """Gets the terminology of this QualitySummaryReviseIssues.  # noqa: E501


        :return: The terminology of this QualitySummaryReviseIssues.  # noqa: E501
        :rtype: ReviseIssue
        """
        return self._terminology

    @terminology.setter
    def terminology(self, terminology):
        """Sets the terminology of this QualitySummaryReviseIssues.


        :param terminology: The terminology of this QualitySummaryReviseIssues.  # noqa: E501
        :type: ReviseIssue
        """

        self._terminology = terminology

    @property
    def language_quality(self):
        """Gets the language_quality of this QualitySummaryReviseIssues.  # noqa: E501


        :return: The language_quality of this QualitySummaryReviseIssues.  # noqa: E501
        :rtype: ReviseIssue
        """
        return self._language_quality

    @language_quality.setter
    def language_quality(self, language_quality):
        """Sets the language_quality of this QualitySummaryReviseIssues.


        :param language_quality: The language_quality of this QualitySummaryReviseIssues.  # noqa: E501
        :type: ReviseIssue
        """

        self._language_quality = language_quality

    @property
    def style(self):
        """Gets the style of this QualitySummaryReviseIssues.  # noqa: E501


        :return: The style of this QualitySummaryReviseIssues.  # noqa: E501
        :rtype: ReviseIssue
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this QualitySummaryReviseIssues.


        :param style: The style of this QualitySummaryReviseIssues.  # noqa: E501
        :type: ReviseIssue
        """

        self._style = style

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualitySummaryReviseIssues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualitySummaryReviseIssues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
