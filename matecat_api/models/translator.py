# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Translator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'added_by': 'int',
        'delivery_date': 'str',
        'delivery_timestamp': 'str',
        'source': 'str',
        'target': 'str',
        'id_translator_profile': 'int',
        'user': 'User'
    }

    attribute_map = {
        'email': 'email',
        'added_by': 'added_by',
        'delivery_date': 'delivery_date',
        'delivery_timestamp': 'delivery_timestamp',
        'source': 'source',
        'target': 'target',
        'id_translator_profile': 'id_translator_profile',
        'user': 'user'
    }

    def __init__(self, email=None, added_by=None, delivery_date=None, delivery_timestamp=None, source=None, target=None, id_translator_profile=None, user=None):  # noqa: E501
        """Translator - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._added_by = None
        self._delivery_date = None
        self._delivery_timestamp = None
        self._source = None
        self._target = None
        self._id_translator_profile = None
        self._user = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if added_by is not None:
            self.added_by = added_by
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if delivery_timestamp is not None:
            self.delivery_timestamp = delivery_timestamp
        if source is not None:
            self.source = source
        if target is not None:
            self.target = target
        if id_translator_profile is not None:
            self.id_translator_profile = id_translator_profile
        if user is not None:
            self.user = user

    @property
    def email(self):
        """Gets the email of this Translator.  # noqa: E501


        :return: The email of this Translator.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Translator.


        :param email: The email of this Translator.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def added_by(self):
        """Gets the added_by of this Translator.  # noqa: E501


        :return: The added_by of this Translator.  # noqa: E501
        :rtype: int
        """
        return self._added_by

    @added_by.setter
    def added_by(self, added_by):
        """Sets the added_by of this Translator.


        :param added_by: The added_by of this Translator.  # noqa: E501
        :type: int
        """

        self._added_by = added_by

    @property
    def delivery_date(self):
        """Gets the delivery_date of this Translator.  # noqa: E501


        :return: The delivery_date of this Translator.  # noqa: E501
        :rtype: str
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this Translator.


        :param delivery_date: The delivery_date of this Translator.  # noqa: E501
        :type: str
        """

        self._delivery_date = delivery_date

    @property
    def delivery_timestamp(self):
        """Gets the delivery_timestamp of this Translator.  # noqa: E501


        :return: The delivery_timestamp of this Translator.  # noqa: E501
        :rtype: str
        """
        return self._delivery_timestamp

    @delivery_timestamp.setter
    def delivery_timestamp(self, delivery_timestamp):
        """Sets the delivery_timestamp of this Translator.


        :param delivery_timestamp: The delivery_timestamp of this Translator.  # noqa: E501
        :type: str
        """

        self._delivery_timestamp = delivery_timestamp

    @property
    def source(self):
        """Gets the source of this Translator.  # noqa: E501


        :return: The source of this Translator.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Translator.


        :param source: The source of this Translator.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this Translator.  # noqa: E501


        :return: The target of this Translator.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Translator.


        :param target: The target of this Translator.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def id_translator_profile(self):
        """Gets the id_translator_profile of this Translator.  # noqa: E501


        :return: The id_translator_profile of this Translator.  # noqa: E501
        :rtype: int
        """
        return self._id_translator_profile

    @id_translator_profile.setter
    def id_translator_profile(self, id_translator_profile):
        """Sets the id_translator_profile of this Translator.


        :param id_translator_profile: The id_translator_profile of this Translator.  # noqa: E501
        :type: int
        """

        self._id_translator_profile = id_translator_profile

    @property
    def user(self):
        """Gets the user of this Translator.  # noqa: E501


        :return: The user of this Translator.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Translator.


        :param user: The user of this Translator.  # noqa: E501
        :type: User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Translator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Translator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
