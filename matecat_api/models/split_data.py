# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SplitData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'raw_word_count': 'object',
        'eq_word_count': 'object',
        'job_first_segment': 'object',
        'job_last_segment': 'object',
        'id': 'object',
        'show_in_cattool': 'object',
        'chunks': 'list[SplitDataChunks]'
    }

    attribute_map = {
        'raw_word_count': 'raw_word_count',
        'eq_word_count': 'eq_word_count',
        'job_first_segment': 'job_first_segment',
        'job_last_segment': 'job_last_segment',
        'id': 'id',
        'show_in_cattool': 'show_in_cattool',
        'chunks': 'chunks'
    }

    def __init__(self, raw_word_count=None, eq_word_count=None, job_first_segment=None, job_last_segment=None, id=None, show_in_cattool=None, chunks=None):  # noqa: E501
        """SplitData - a model defined in Swagger"""  # noqa: E501
        self._raw_word_count = None
        self._eq_word_count = None
        self._job_first_segment = None
        self._job_last_segment = None
        self._id = None
        self._show_in_cattool = None
        self._chunks = None
        self.discriminator = None
        if raw_word_count is not None:
            self.raw_word_count = raw_word_count
        if eq_word_count is not None:
            self.eq_word_count = eq_word_count
        if job_first_segment is not None:
            self.job_first_segment = job_first_segment
        if job_last_segment is not None:
            self.job_last_segment = job_last_segment
        if id is not None:
            self.id = id
        if show_in_cattool is not None:
            self.show_in_cattool = show_in_cattool
        if chunks is not None:
            self.chunks = chunks

    @property
    def raw_word_count(self):
        """Gets the raw_word_count of this SplitData.  # noqa: E501


        :return: The raw_word_count of this SplitData.  # noqa: E501
        :rtype: object
        """
        return self._raw_word_count

    @raw_word_count.setter
    def raw_word_count(self, raw_word_count):
        """Sets the raw_word_count of this SplitData.


        :param raw_word_count: The raw_word_count of this SplitData.  # noqa: E501
        :type: object
        """

        self._raw_word_count = raw_word_count

    @property
    def eq_word_count(self):
        """Gets the eq_word_count of this SplitData.  # noqa: E501


        :return: The eq_word_count of this SplitData.  # noqa: E501
        :rtype: object
        """
        return self._eq_word_count

    @eq_word_count.setter
    def eq_word_count(self, eq_word_count):
        """Sets the eq_word_count of this SplitData.


        :param eq_word_count: The eq_word_count of this SplitData.  # noqa: E501
        :type: object
        """

        self._eq_word_count = eq_word_count

    @property
    def job_first_segment(self):
        """Gets the job_first_segment of this SplitData.  # noqa: E501


        :return: The job_first_segment of this SplitData.  # noqa: E501
        :rtype: object
        """
        return self._job_first_segment

    @job_first_segment.setter
    def job_first_segment(self, job_first_segment):
        """Sets the job_first_segment of this SplitData.


        :param job_first_segment: The job_first_segment of this SplitData.  # noqa: E501
        :type: object
        """

        self._job_first_segment = job_first_segment

    @property
    def job_last_segment(self):
        """Gets the job_last_segment of this SplitData.  # noqa: E501


        :return: The job_last_segment of this SplitData.  # noqa: E501
        :rtype: object
        """
        return self._job_last_segment

    @job_last_segment.setter
    def job_last_segment(self, job_last_segment):
        """Sets the job_last_segment of this SplitData.


        :param job_last_segment: The job_last_segment of this SplitData.  # noqa: E501
        :type: object
        """

        self._job_last_segment = job_last_segment

    @property
    def id(self):
        """Gets the id of this SplitData.  # noqa: E501


        :return: The id of this SplitData.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SplitData.


        :param id: The id of this SplitData.  # noqa: E501
        :type: object
        """

        self._id = id

    @property
    def show_in_cattool(self):
        """Gets the show_in_cattool of this SplitData.  # noqa: E501


        :return: The show_in_cattool of this SplitData.  # noqa: E501
        :rtype: object
        """
        return self._show_in_cattool

    @show_in_cattool.setter
    def show_in_cattool(self, show_in_cattool):
        """Sets the show_in_cattool of this SplitData.


        :param show_in_cattool: The show_in_cattool of this SplitData.  # noqa: E501
        :type: object
        """

        self._show_in_cattool = show_in_cattool

    @property
    def chunks(self):
        """Gets the chunks of this SplitData.  # noqa: E501


        :return: The chunks of this SplitData.  # noqa: E501
        :rtype: list[SplitDataChunks]
        """
        return self._chunks

    @chunks.setter
    def chunks(self, chunks):
        """Sets the chunks of this SplitData.


        :param chunks: The chunks of this SplitData.  # noqa: E501
        :type: list[SplitDataChunks]
        """

        self._chunks = chunks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SplitData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SplitData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
