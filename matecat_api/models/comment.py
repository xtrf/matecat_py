# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Comment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'id_job': 'str',
        'id_segment': 'str',
        'created_at': 'str',
        'email': 'str',
        'full_name': 'str',
        'uid': 'int',
        'resolved_at': 'str',
        'source_page': 'int',
        'mwssage_type': 'int',
        'message': 'str'
    }

    attribute_map = {
        'id': 'id',
        'id_job': 'id_job',
        'id_segment': 'id_segment',
        'created_at': 'created_at',
        'email': 'email',
        'full_name': 'full_name',
        'uid': 'uid',
        'resolved_at': 'resolved_at',
        'source_page': 'source_page',
        'mwssage_type': 'mwssage_type',
        'message': 'message'
    }

    def __init__(self, id=None, id_job=None, id_segment=None, created_at=None, email=None, full_name=None, uid=None, resolved_at=None, source_page=None, mwssage_type=None, message=None):  # noqa: E501
        """Comment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_job = None
        self._id_segment = None
        self._created_at = None
        self._email = None
        self._full_name = None
        self._uid = None
        self._resolved_at = None
        self._source_page = None
        self._mwssage_type = None
        self._message = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_job is not None:
            self.id_job = id_job
        if id_segment is not None:
            self.id_segment = id_segment
        if created_at is not None:
            self.created_at = created_at
        if email is not None:
            self.email = email
        if full_name is not None:
            self.full_name = full_name
        if uid is not None:
            self.uid = uid
        if resolved_at is not None:
            self.resolved_at = resolved_at
        if source_page is not None:
            self.source_page = source_page
        if mwssage_type is not None:
            self.mwssage_type = mwssage_type
        if message is not None:
            self.message = message

    @property
    def id(self):
        """Gets the id of this Comment.  # noqa: E501


        :return: The id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.


        :param id: The id of this Comment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id_job(self):
        """Gets the id_job of this Comment.  # noqa: E501


        :return: The id_job of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._id_job

    @id_job.setter
    def id_job(self, id_job):
        """Sets the id_job of this Comment.


        :param id_job: The id_job of this Comment.  # noqa: E501
        :type: str
        """

        self._id_job = id_job

    @property
    def id_segment(self):
        """Gets the id_segment of this Comment.  # noqa: E501


        :return: The id_segment of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._id_segment

    @id_segment.setter
    def id_segment(self, id_segment):
        """Sets the id_segment of this Comment.


        :param id_segment: The id_segment of this Comment.  # noqa: E501
        :type: str
        """

        self._id_segment = id_segment

    @property
    def created_at(self):
        """Gets the created_at of this Comment.  # noqa: E501


        :return: The created_at of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Comment.


        :param created_at: The created_at of this Comment.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this Comment.  # noqa: E501


        :return: The email of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Comment.


        :param email: The email of this Comment.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this Comment.  # noqa: E501


        :return: The full_name of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Comment.


        :param full_name: The full_name of this Comment.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def uid(self):
        """Gets the uid of this Comment.  # noqa: E501


        :return: The uid of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Comment.


        :param uid: The uid of this Comment.  # noqa: E501
        :type: int
        """

        self._uid = uid

    @property
    def resolved_at(self):
        """Gets the resolved_at of this Comment.  # noqa: E501


        :return: The resolved_at of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._resolved_at

    @resolved_at.setter
    def resolved_at(self, resolved_at):
        """Sets the resolved_at of this Comment.


        :param resolved_at: The resolved_at of this Comment.  # noqa: E501
        :type: str
        """

        self._resolved_at = resolved_at

    @property
    def source_page(self):
        """Gets the source_page of this Comment.  # noqa: E501


        :return: The source_page of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._source_page

    @source_page.setter
    def source_page(self, source_page):
        """Sets the source_page of this Comment.


        :param source_page: The source_page of this Comment.  # noqa: E501
        :type: int
        """

        self._source_page = source_page

    @property
    def mwssage_type(self):
        """Gets the mwssage_type of this Comment.  # noqa: E501


        :return: The mwssage_type of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._mwssage_type

    @mwssage_type.setter
    def mwssage_type(self, mwssage_type):
        """Sets the mwssage_type of this Comment.


        :param mwssage_type: The mwssage_type of this Comment.  # noqa: E501
        :type: int
        """

        self._mwssage_type = mwssage_type

    @property
    def message(self):
        """Gets the message of this Comment.  # noqa: E501


        :return: The message of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Comment.


        :param message: The message of this Comment.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Comment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Comment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
