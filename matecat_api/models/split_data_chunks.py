# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SplitDataChunks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eq_word_count': 'object',
        'raw_word_count': 'object',
        'segment_start': 'object',
        'segment_end': 'object',
        'last_opened_segment': 'object'
    }

    attribute_map = {
        'eq_word_count': 'eq_word_count',
        'raw_word_count': 'raw_word_count',
        'segment_start': 'segment_start',
        'segment_end': 'segment_end',
        'last_opened_segment': 'last_opened_segment'
    }

    def __init__(self, eq_word_count=None, raw_word_count=None, segment_start=None, segment_end=None, last_opened_segment=None):  # noqa: E501
        """SplitDataChunks - a model defined in Swagger"""  # noqa: E501
        self._eq_word_count = None
        self._raw_word_count = None
        self._segment_start = None
        self._segment_end = None
        self._last_opened_segment = None
        self.discriminator = None
        if eq_word_count is not None:
            self.eq_word_count = eq_word_count
        if raw_word_count is not None:
            self.raw_word_count = raw_word_count
        if segment_start is not None:
            self.segment_start = segment_start
        if segment_end is not None:
            self.segment_end = segment_end
        if last_opened_segment is not None:
            self.last_opened_segment = last_opened_segment

    @property
    def eq_word_count(self):
        """Gets the eq_word_count of this SplitDataChunks.  # noqa: E501


        :return: The eq_word_count of this SplitDataChunks.  # noqa: E501
        :rtype: object
        """
        return self._eq_word_count

    @eq_word_count.setter
    def eq_word_count(self, eq_word_count):
        """Sets the eq_word_count of this SplitDataChunks.


        :param eq_word_count: The eq_word_count of this SplitDataChunks.  # noqa: E501
        :type: object
        """

        self._eq_word_count = eq_word_count

    @property
    def raw_word_count(self):
        """Gets the raw_word_count of this SplitDataChunks.  # noqa: E501


        :return: The raw_word_count of this SplitDataChunks.  # noqa: E501
        :rtype: object
        """
        return self._raw_word_count

    @raw_word_count.setter
    def raw_word_count(self, raw_word_count):
        """Sets the raw_word_count of this SplitDataChunks.


        :param raw_word_count: The raw_word_count of this SplitDataChunks.  # noqa: E501
        :type: object
        """

        self._raw_word_count = raw_word_count

    @property
    def segment_start(self):
        """Gets the segment_start of this SplitDataChunks.  # noqa: E501


        :return: The segment_start of this SplitDataChunks.  # noqa: E501
        :rtype: object
        """
        return self._segment_start

    @segment_start.setter
    def segment_start(self, segment_start):
        """Sets the segment_start of this SplitDataChunks.


        :param segment_start: The segment_start of this SplitDataChunks.  # noqa: E501
        :type: object
        """

        self._segment_start = segment_start

    @property
    def segment_end(self):
        """Gets the segment_end of this SplitDataChunks.  # noqa: E501


        :return: The segment_end of this SplitDataChunks.  # noqa: E501
        :rtype: object
        """
        return self._segment_end

    @segment_end.setter
    def segment_end(self, segment_end):
        """Sets the segment_end of this SplitDataChunks.


        :param segment_end: The segment_end of this SplitDataChunks.  # noqa: E501
        :type: object
        """

        self._segment_end = segment_end

    @property
    def last_opened_segment(self):
        """Gets the last_opened_segment of this SplitDataChunks.  # noqa: E501


        :return: The last_opened_segment of this SplitDataChunks.  # noqa: E501
        :rtype: object
        """
        return self._last_opened_segment

    @last_opened_segment.setter
    def last_opened_segment(self, last_opened_segment):
        """Sets the last_opened_segment of this SplitDataChunks.


        :param last_opened_segment: The last_opened_segment of this SplitDataChunks.  # noqa: E501
        :type: object
        """

        self._last_opened_segment = last_opened_segment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SplitDataChunks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SplitDataChunks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
