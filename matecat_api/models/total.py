# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Total(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_payable': 'list[object]',
        'repetitions': 'list[object]',
        'internal_matches': 'list[object]',
        'mt': 'list[object]',
        'new': 'list[object]',
        'tm_100': 'list[object]',
        'tm_75_99': 'list[object]',
        'ice': 'list[object]',
        'numbers_only': 'list[object]'
    }

    attribute_map = {
        'total_payable': 'TOTAL_PAYABLE',
        'repetitions': 'REPETITIONS',
        'internal_matches': 'INTERNAL_MATCHES',
        'mt': 'MT',
        'new': 'NEW',
        'tm_100': 'TM_100',
        'tm_75_99': 'TM_75_99',
        'ice': 'ICE',
        'numbers_only': 'NUMBERS_ONLY'
    }

    def __init__(self, total_payable=None, repetitions=None, internal_matches=None, mt=None, new=None, tm_100=None, tm_75_99=None, ice=None, numbers_only=None):  # noqa: E501
        """Total - a model defined in Swagger"""  # noqa: E501
        self._total_payable = None
        self._repetitions = None
        self._internal_matches = None
        self._mt = None
        self._new = None
        self._tm_100 = None
        self._tm_75_99 = None
        self._ice = None
        self._numbers_only = None
        self.discriminator = None
        if total_payable is not None:
            self.total_payable = total_payable
        if repetitions is not None:
            self.repetitions = repetitions
        if internal_matches is not None:
            self.internal_matches = internal_matches
        if mt is not None:
            self.mt = mt
        if new is not None:
            self.new = new
        if tm_100 is not None:
            self.tm_100 = tm_100
        if tm_75_99 is not None:
            self.tm_75_99 = tm_75_99
        if ice is not None:
            self.ice = ice
        if numbers_only is not None:
            self.numbers_only = numbers_only

    @property
    def total_payable(self):
        """Gets the total_payable of this Total.  # noqa: E501

        total word count, after analysis  # noqa: E501

        :return: The total_payable of this Total.  # noqa: E501
        :rtype: list[object]
        """
        return self._total_payable

    @total_payable.setter
    def total_payable(self, total_payable):
        """Sets the total_payable of this Total.

        total word count, after analysis  # noqa: E501

        :param total_payable: The total_payable of this Total.  # noqa: E501
        :type: list[object]
        """

        self._total_payable = total_payable

    @property
    def repetitions(self):
        """Gets the repetitions of this Total.  # noqa: E501

        cumulative word count for the segments that repeat themselves in the file  # noqa: E501

        :return: The repetitions of this Total.  # noqa: E501
        :rtype: list[object]
        """
        return self._repetitions

    @repetitions.setter
    def repetitions(self, repetitions):
        """Sets the repetitions of this Total.

        cumulative word count for the segments that repeat themselves in the file  # noqa: E501

        :param repetitions: The repetitions of this Total.  # noqa: E501
        :type: list[object]
        """

        self._repetitions = repetitions

    @property
    def internal_matches(self):
        """Gets the internal_matches of this Total.  # noqa: E501

        cumulative word count for the segments that fuzzily overlap with others in the file, while not being an exact repetition  # noqa: E501

        :return: The internal_matches of this Total.  # noqa: E501
        :rtype: list[object]
        """
        return self._internal_matches

    @internal_matches.setter
    def internal_matches(self, internal_matches):
        """Sets the internal_matches of this Total.

        cumulative word count for the segments that fuzzily overlap with others in the file, while not being an exact repetition  # noqa: E501

        :param internal_matches: The internal_matches of this Total.  # noqa: E501
        :type: list[object]
        """

        self._internal_matches = internal_matches

    @property
    def mt(self):
        """Gets the mt of this Total.  # noqa: E501

        cumulative word count for all segments that can be translated with machine translation; it accounts for all the information that could not be discounted by repetitions, internal matches or translation memory  # noqa: E501

        :return: The mt of this Total.  # noqa: E501
        :rtype: list[object]
        """
        return self._mt

    @mt.setter
    def mt(self, mt):
        """Sets the mt of this Total.

        cumulative word count for all segments that can be translated with machine translation; it accounts for all the information that could not be discounted by repetitions, internal matches or translation memory  # noqa: E501

        :param mt: The mt of this Total.  # noqa: E501
        :type: list[object]
        """

        self._mt = mt

    @property
    def new(self):
        """Gets the new of this Total.  # noqa: E501

        cumulative word count for segments that can't be discounted with repetition or internal matches; it's the net translation effort  # noqa: E501

        :return: The new of this Total.  # noqa: E501
        :rtype: list[object]
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this Total.

        cumulative word count for segments that can't be discounted with repetition or internal matches; it's the net translation effort  # noqa: E501

        :param new: The new of this Total.  # noqa: E501
        :type: list[object]
        """

        self._new = new

    @property
    def tm_100(self):
        """Gets the tm_100 of this Total.  # noqa: E501

        cumulative word count for the exact matches found in TM server  # noqa: E501

        :return: The tm_100 of this Total.  # noqa: E501
        :rtype: list[object]
        """
        return self._tm_100

    @tm_100.setter
    def tm_100(self, tm_100):
        """Sets the tm_100 of this Total.

        cumulative word count for the exact matches found in TM server  # noqa: E501

        :param tm_100: The tm_100 of this Total.  # noqa: E501
        :type: list[object]
        """

        self._tm_100 = tm_100

    @property
    def tm_75_99(self):
        """Gets the tm_75_99 of this Total.  # noqa: E501

        cumulative word count for partial matches in the TM that cover 75-99% of each segment  # noqa: E501

        :return: The tm_75_99 of this Total.  # noqa: E501
        :rtype: list[object]
        """
        return self._tm_75_99

    @tm_75_99.setter
    def tm_75_99(self, tm_75_99):
        """Sets the tm_75_99 of this Total.

        cumulative word count for partial matches in the TM that cover 75-99% of each segment  # noqa: E501

        :param tm_75_99: The tm_75_99 of this Total.  # noqa: E501
        :type: list[object]
        """

        self._tm_75_99 = tm_75_99

    @property
    def ice(self):
        """Gets the ice of this Total.  # noqa: E501

        cumulative word count for 100% TM matches that also share the same context with the TM  # noqa: E501

        :return: The ice of this Total.  # noqa: E501
        :rtype: list[object]
        """
        return self._ice

    @ice.setter
    def ice(self, ice):
        """Sets the ice of this Total.

        cumulative word count for 100% TM matches that also share the same context with the TM  # noqa: E501

        :param ice: The ice of this Total.  # noqa: E501
        :type: list[object]
        """

        self._ice = ice

    @property
    def numbers_only(self):
        """Gets the numbers_only of this Total.  # noqa: E501

        cumulative word counts for segments made of numberings, dates and similar not translatable data ( i.e. 93 / 127 )  # noqa: E501

        :return: The numbers_only of this Total.  # noqa: E501
        :rtype: list[object]
        """
        return self._numbers_only

    @numbers_only.setter
    def numbers_only(self, numbers_only):
        """Sets the numbers_only of this Total.

        cumulative word counts for segments made of numberings, dates and similar not translatable data ( i.e. 93 / 127 )  # noqa: E501

        :param numbers_only: The numbers_only of this Total.  # noqa: E501
        :type: list[object]
        """

        self._numbers_only = numbers_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Total, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Total):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
