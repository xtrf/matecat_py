# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'id_project': 'str',
        'project_pass': 'str',
        'new_keys': 'str'
    }

    attribute_map = {
        'status': 'status',
        'id_project': 'id_project',
        'project_pass': 'project_pass',
        'new_keys': 'new_keys'
    }

    def __init__(self, status=None, id_project=None, project_pass=None, new_keys=None):  # noqa: E501
        """NewProject - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._id_project = None
        self._project_pass = None
        self._new_keys = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if id_project is not None:
            self.id_project = id_project
        if project_pass is not None:
            self.project_pass = project_pass
        if new_keys is not None:
            self.new_keys = new_keys

    @property
    def status(self):
        """Gets the status of this NewProject.  # noqa: E501

        Return the creation status of the project. The statuses can be:OK indicating that the creation worked.FAIL indicating that the creation is failed.  # noqa: E501

        :return: The status of this NewProject.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NewProject.

        Return the creation status of the project. The statuses can be:OK indicating that the creation worked.FAIL indicating that the creation is failed.  # noqa: E501

        :param status: The status of this NewProject.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "FAIL"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def id_project(self):
        """Gets the id_project of this NewProject.  # noqa: E501

        Return the unique id of the project just created. If creation status is FAIL this key will simply be omitted from the result.  # noqa: E501

        :return: The id_project of this NewProject.  # noqa: E501
        :rtype: str
        """
        return self._id_project

    @id_project.setter
    def id_project(self, id_project):
        """Sets the id_project of this NewProject.

        Return the unique id of the project just created. If creation status is FAIL this key will simply be omitted from the result.  # noqa: E501

        :param id_project: The id_project of this NewProject.  # noqa: E501
        :type: str
        """

        self._id_project = id_project

    @property
    def project_pass(self):
        """Gets the project_pass of this NewProject.  # noqa: E501

        Return the password of the project just created. If creation status is FAIL this key will simply be omitted from the result.  # noqa: E501

        :return: The project_pass of this NewProject.  # noqa: E501
        :rtype: str
        """
        return self._project_pass

    @project_pass.setter
    def project_pass(self, project_pass):
        """Sets the project_pass of this NewProject.

        Return the password of the project just created. If creation status is FAIL this key will simply be omitted from the result.  # noqa: E501

        :param project_pass: The project_pass of this NewProject.  # noqa: E501
        :type: str
        """

        self._project_pass = project_pass

    @property
    def new_keys(self):
        """Gets the new_keys of this NewProject.  # noqa: E501

        If you specified new as one or more value in the private_tm_key parameter, the new created keys are returned as CSV string (4rcf34rc,r34rcfewf3r2). Otherwise empty string is returned  # noqa: E501

        :return: The new_keys of this NewProject.  # noqa: E501
        :rtype: str
        """
        return self._new_keys

    @new_keys.setter
    def new_keys(self, new_keys):
        """Sets the new_keys of this NewProject.

        If you specified new as one or more value in the private_tm_key parameter, the new created keys are returned as CSV string (4rcf34rc,r34rcfewf3r2). Otherwise empty string is returned  # noqa: E501

        :param new_keys: The new_keys of this NewProject.  # noqa: E501
        :type: str
        """

        self._new_keys = new_keys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
