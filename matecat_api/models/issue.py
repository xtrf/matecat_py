# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Issue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'created_at': 'str',
        'id': 'str',
        'id_category': 'str',
        'id_job': 'str',
        'id_segment': 'str',
        'is_full_segment': 'str',
        'severity': 'str',
        'start_node': 'str',
        'start_offset': 'str',
        'end_node': 'str',
        'end_offset': 'str',
        'translation_version': 'str',
        'target_text': 'str',
        'penality_points': 'str',
        'rebutted_at': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'created_at': 'created_at',
        'id': 'id',
        'id_category': 'id_category',
        'id_job': 'id_job',
        'id_segment': 'id_segment',
        'is_full_segment': 'is_full_segment',
        'severity': 'severity',
        'start_node': 'start_node',
        'start_offset': 'start_offset',
        'end_node': 'end_node',
        'end_offset': 'end_offset',
        'translation_version': 'translation_version',
        'target_text': 'target_text',
        'penality_points': 'penality_points',
        'rebutted_at': 'rebutted_at'
    }

    def __init__(self, comment=None, created_at=None, id=None, id_category=None, id_job=None, id_segment=None, is_full_segment=None, severity=None, start_node=None, start_offset=None, end_node=None, end_offset=None, translation_version=None, target_text=None, penality_points=None, rebutted_at=None):  # noqa: E501
        """Issue - a model defined in Swagger"""  # noqa: E501
        self._comment = None
        self._created_at = None
        self._id = None
        self._id_category = None
        self._id_job = None
        self._id_segment = None
        self._is_full_segment = None
        self._severity = None
        self._start_node = None
        self._start_offset = None
        self._end_node = None
        self._end_offset = None
        self._translation_version = None
        self._target_text = None
        self._penality_points = None
        self._rebutted_at = None
        self.discriminator = None
        if comment is not None:
            self.comment = comment
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if id_category is not None:
            self.id_category = id_category
        if id_job is not None:
            self.id_job = id_job
        if id_segment is not None:
            self.id_segment = id_segment
        if is_full_segment is not None:
            self.is_full_segment = is_full_segment
        if severity is not None:
            self.severity = severity
        if start_node is not None:
            self.start_node = start_node
        if start_offset is not None:
            self.start_offset = start_offset
        if end_node is not None:
            self.end_node = end_node
        if end_offset is not None:
            self.end_offset = end_offset
        if translation_version is not None:
            self.translation_version = translation_version
        if target_text is not None:
            self.target_text = target_text
        if penality_points is not None:
            self.penality_points = penality_points
        if rebutted_at is not None:
            self.rebutted_at = rebutted_at

    @property
    def comment(self):
        """Gets the comment of this Issue.  # noqa: E501


        :return: The comment of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Issue.


        :param comment: The comment of this Issue.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this Issue.  # noqa: E501


        :return: The created_at of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Issue.


        :param created_at: The created_at of this Issue.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Issue.  # noqa: E501


        :return: The id of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Issue.


        :param id: The id of this Issue.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id_category(self):
        """Gets the id_category of this Issue.  # noqa: E501


        :return: The id_category of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._id_category

    @id_category.setter
    def id_category(self, id_category):
        """Sets the id_category of this Issue.


        :param id_category: The id_category of this Issue.  # noqa: E501
        :type: str
        """

        self._id_category = id_category

    @property
    def id_job(self):
        """Gets the id_job of this Issue.  # noqa: E501


        :return: The id_job of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._id_job

    @id_job.setter
    def id_job(self, id_job):
        """Sets the id_job of this Issue.


        :param id_job: The id_job of this Issue.  # noqa: E501
        :type: str
        """

        self._id_job = id_job

    @property
    def id_segment(self):
        """Gets the id_segment of this Issue.  # noqa: E501


        :return: The id_segment of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._id_segment

    @id_segment.setter
    def id_segment(self, id_segment):
        """Sets the id_segment of this Issue.


        :param id_segment: The id_segment of this Issue.  # noqa: E501
        :type: str
        """

        self._id_segment = id_segment

    @property
    def is_full_segment(self):
        """Gets the is_full_segment of this Issue.  # noqa: E501


        :return: The is_full_segment of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._is_full_segment

    @is_full_segment.setter
    def is_full_segment(self, is_full_segment):
        """Sets the is_full_segment of this Issue.


        :param is_full_segment: The is_full_segment of this Issue.  # noqa: E501
        :type: str
        """

        self._is_full_segment = is_full_segment

    @property
    def severity(self):
        """Gets the severity of this Issue.  # noqa: E501


        :return: The severity of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Issue.


        :param severity: The severity of this Issue.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def start_node(self):
        """Gets the start_node of this Issue.  # noqa: E501


        :return: The start_node of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._start_node

    @start_node.setter
    def start_node(self, start_node):
        """Sets the start_node of this Issue.


        :param start_node: The start_node of this Issue.  # noqa: E501
        :type: str
        """

        self._start_node = start_node

    @property
    def start_offset(self):
        """Gets the start_offset of this Issue.  # noqa: E501


        :return: The start_offset of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """Sets the start_offset of this Issue.


        :param start_offset: The start_offset of this Issue.  # noqa: E501
        :type: str
        """

        self._start_offset = start_offset

    @property
    def end_node(self):
        """Gets the end_node of this Issue.  # noqa: E501


        :return: The end_node of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._end_node

    @end_node.setter
    def end_node(self, end_node):
        """Sets the end_node of this Issue.


        :param end_node: The end_node of this Issue.  # noqa: E501
        :type: str
        """

        self._end_node = end_node

    @property
    def end_offset(self):
        """Gets the end_offset of this Issue.  # noqa: E501


        :return: The end_offset of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """Sets the end_offset of this Issue.


        :param end_offset: The end_offset of this Issue.  # noqa: E501
        :type: str
        """

        self._end_offset = end_offset

    @property
    def translation_version(self):
        """Gets the translation_version of this Issue.  # noqa: E501


        :return: The translation_version of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._translation_version

    @translation_version.setter
    def translation_version(self, translation_version):
        """Sets the translation_version of this Issue.


        :param translation_version: The translation_version of this Issue.  # noqa: E501
        :type: str
        """

        self._translation_version = translation_version

    @property
    def target_text(self):
        """Gets the target_text of this Issue.  # noqa: E501


        :return: The target_text of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._target_text

    @target_text.setter
    def target_text(self, target_text):
        """Sets the target_text of this Issue.


        :param target_text: The target_text of this Issue.  # noqa: E501
        :type: str
        """

        self._target_text = target_text

    @property
    def penality_points(self):
        """Gets the penality_points of this Issue.  # noqa: E501


        :return: The penality_points of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._penality_points

    @penality_points.setter
    def penality_points(self, penality_points):
        """Sets the penality_points of this Issue.


        :param penality_points: The penality_points of this Issue.  # noqa: E501
        :type: str
        """

        self._penality_points = penality_points

    @property
    def rebutted_at(self):
        """Gets the rebutted_at of this Issue.  # noqa: E501


        :return: The rebutted_at of this Issue.  # noqa: E501
        :rtype: str
        """
        return self._rebutted_at

    @rebutted_at.setter
    def rebutted_at(self, rebutted_at):
        """Sets the rebutted_at of this Issue.


        :param rebutted_at: The rebutted_at of this Issue.  # noqa: E501
        :type: str
        """

        self._rebutted_at = rebutted_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Issue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Issue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
