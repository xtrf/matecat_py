# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExtendedJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'password': 'str',
        'source': 'str',
        'target': 'str',
        'source_txt': 'str',
        'target_txt': 'str',
        'status': 'str',
        'subject': 'str',
        'owner': 'str',
        'open_threads_count': 'int',
        'create_timestamp': 'int',
        'created_at': 'datetime',
        'create_date': 'datetime',
        'formatted_create_date': 'str',
        'quality_overall': 'str',
        'pee': 'int',
        'tte': 'int',
        'private_tm_key': 'list[str]',
        'warnings_count': 'int',
        'warning_segments': 'list[int]',
        'outsource': 'OutsourceConfirmation',
        'translator': 'Translator',
        'urls': 'JobUrl',
        'stats': 'Stats',
        'quality_summary': 'QualitySummary'
    }

    attribute_map = {
        'id': 'id',
        'password': 'password',
        'source': 'source',
        'target': 'target',
        'source_txt': 'sourceTxt',
        'target_txt': 'targetTxt',
        'status': 'status',
        'subject': 'subject',
        'owner': 'owner',
        'open_threads_count': 'open_threads_count',
        'create_timestamp': 'create_timestamp',
        'created_at': 'created_at',
        'create_date': 'create_date',
        'formatted_create_date': 'formatted_create_date',
        'quality_overall': 'quality_overall',
        'pee': 'pee',
        'tte': 'tte',
        'private_tm_key': 'private_tm_key',
        'warnings_count': 'warnings_count',
        'warning_segments': 'warning_segments',
        'outsource': 'outsource',
        'translator': 'translator',
        'urls': 'urls',
        'stats': 'stats',
        'quality_summary': 'quality_summary'
    }

    def __init__(self, id=None, password=None, source=None, target=None, source_txt=None, target_txt=None, status=None, subject=None, owner=None, open_threads_count=None, create_timestamp=None, created_at=None, create_date=None, formatted_create_date=None, quality_overall=None, pee=None, tte=None, private_tm_key=None, warnings_count=None, warning_segments=None, outsource=None, translator=None, urls=None, stats=None, quality_summary=None):  # noqa: E501
        """ExtendedJob - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._password = None
        self._source = None
        self._target = None
        self._source_txt = None
        self._target_txt = None
        self._status = None
        self._subject = None
        self._owner = None
        self._open_threads_count = None
        self._create_timestamp = None
        self._created_at = None
        self._create_date = None
        self._formatted_create_date = None
        self._quality_overall = None
        self._pee = None
        self._tte = None
        self._private_tm_key = None
        self._warnings_count = None
        self._warning_segments = None
        self._outsource = None
        self._translator = None
        self._urls = None
        self._stats = None
        self._quality_summary = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if password is not None:
            self.password = password
        if source is not None:
            self.source = source
        if target is not None:
            self.target = target
        if source_txt is not None:
            self.source_txt = source_txt
        if target_txt is not None:
            self.target_txt = target_txt
        if status is not None:
            self.status = status
        if subject is not None:
            self.subject = subject
        if owner is not None:
            self.owner = owner
        if open_threads_count is not None:
            self.open_threads_count = open_threads_count
        if create_timestamp is not None:
            self.create_timestamp = create_timestamp
        if created_at is not None:
            self.created_at = created_at
        if create_date is not None:
            self.create_date = create_date
        if formatted_create_date is not None:
            self.formatted_create_date = formatted_create_date
        if quality_overall is not None:
            self.quality_overall = quality_overall
        if pee is not None:
            self.pee = pee
        if tte is not None:
            self.tte = tte
        if private_tm_key is not None:
            self.private_tm_key = private_tm_key
        if warnings_count is not None:
            self.warnings_count = warnings_count
        if warning_segments is not None:
            self.warning_segments = warning_segments
        if outsource is not None:
            self.outsource = outsource
        if translator is not None:
            self.translator = translator
        if urls is not None:
            self.urls = urls
        if stats is not None:
            self.stats = stats
        if quality_summary is not None:
            self.quality_summary = quality_summary

    @property
    def id(self):
        """Gets the id of this ExtendedJob.  # noqa: E501


        :return: The id of this ExtendedJob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtendedJob.


        :param id: The id of this ExtendedJob.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def password(self):
        """Gets the password of this ExtendedJob.  # noqa: E501


        :return: The password of this ExtendedJob.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ExtendedJob.


        :param password: The password of this ExtendedJob.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def source(self):
        """Gets the source of this ExtendedJob.  # noqa: E501


        :return: The source of this ExtendedJob.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ExtendedJob.


        :param source: The source of this ExtendedJob.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this ExtendedJob.  # noqa: E501


        :return: The target of this ExtendedJob.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ExtendedJob.


        :param target: The target of this ExtendedJob.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def source_txt(self):
        """Gets the source_txt of this ExtendedJob.  # noqa: E501


        :return: The source_txt of this ExtendedJob.  # noqa: E501
        :rtype: str
        """
        return self._source_txt

    @source_txt.setter
    def source_txt(self, source_txt):
        """Sets the source_txt of this ExtendedJob.


        :param source_txt: The source_txt of this ExtendedJob.  # noqa: E501
        :type: str
        """

        self._source_txt = source_txt

    @property
    def target_txt(self):
        """Gets the target_txt of this ExtendedJob.  # noqa: E501


        :return: The target_txt of this ExtendedJob.  # noqa: E501
        :rtype: str
        """
        return self._target_txt

    @target_txt.setter
    def target_txt(self, target_txt):
        """Sets the target_txt of this ExtendedJob.


        :param target_txt: The target_txt of this ExtendedJob.  # noqa: E501
        :type: str
        """

        self._target_txt = target_txt

    @property
    def status(self):
        """Gets the status of this ExtendedJob.  # noqa: E501


        :return: The status of this ExtendedJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExtendedJob.


        :param status: The status of this ExtendedJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this ExtendedJob.  # noqa: E501


        :return: The subject of this ExtendedJob.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ExtendedJob.


        :param subject: The subject of this ExtendedJob.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def owner(self):
        """Gets the owner of this ExtendedJob.  # noqa: E501


        :return: The owner of this ExtendedJob.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ExtendedJob.


        :param owner: The owner of this ExtendedJob.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def open_threads_count(self):
        """Gets the open_threads_count of this ExtendedJob.  # noqa: E501


        :return: The open_threads_count of this ExtendedJob.  # noqa: E501
        :rtype: int
        """
        return self._open_threads_count

    @open_threads_count.setter
    def open_threads_count(self, open_threads_count):
        """Sets the open_threads_count of this ExtendedJob.


        :param open_threads_count: The open_threads_count of this ExtendedJob.  # noqa: E501
        :type: int
        """

        self._open_threads_count = open_threads_count

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this ExtendedJob.  # noqa: E501


        :return: The create_timestamp of this ExtendedJob.  # noqa: E501
        :rtype: int
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this ExtendedJob.


        :param create_timestamp: The create_timestamp of this ExtendedJob.  # noqa: E501
        :type: int
        """

        self._create_timestamp = create_timestamp

    @property
    def created_at(self):
        """Gets the created_at of this ExtendedJob.  # noqa: E501


        :return: The created_at of this ExtendedJob.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ExtendedJob.


        :param created_at: The created_at of this ExtendedJob.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def create_date(self):
        """Gets the create_date of this ExtendedJob.  # noqa: E501


        :return: The create_date of this ExtendedJob.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this ExtendedJob.


        :param create_date: The create_date of this ExtendedJob.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def formatted_create_date(self):
        """Gets the formatted_create_date of this ExtendedJob.  # noqa: E501


        :return: The formatted_create_date of this ExtendedJob.  # noqa: E501
        :rtype: str
        """
        return self._formatted_create_date

    @formatted_create_date.setter
    def formatted_create_date(self, formatted_create_date):
        """Sets the formatted_create_date of this ExtendedJob.


        :param formatted_create_date: The formatted_create_date of this ExtendedJob.  # noqa: E501
        :type: str
        """

        self._formatted_create_date = formatted_create_date

    @property
    def quality_overall(self):
        """Gets the quality_overall of this ExtendedJob.  # noqa: E501


        :return: The quality_overall of this ExtendedJob.  # noqa: E501
        :rtype: str
        """
        return self._quality_overall

    @quality_overall.setter
    def quality_overall(self, quality_overall):
        """Sets the quality_overall of this ExtendedJob.


        :param quality_overall: The quality_overall of this ExtendedJob.  # noqa: E501
        :type: str
        """

        self._quality_overall = quality_overall

    @property
    def pee(self):
        """Gets the pee of this ExtendedJob.  # noqa: E501


        :return: The pee of this ExtendedJob.  # noqa: E501
        :rtype: int
        """
        return self._pee

    @pee.setter
    def pee(self, pee):
        """Sets the pee of this ExtendedJob.


        :param pee: The pee of this ExtendedJob.  # noqa: E501
        :type: int
        """

        self._pee = pee

    @property
    def tte(self):
        """Gets the tte of this ExtendedJob.  # noqa: E501


        :return: The tte of this ExtendedJob.  # noqa: E501
        :rtype: int
        """
        return self._tte

    @tte.setter
    def tte(self, tte):
        """Sets the tte of this ExtendedJob.


        :param tte: The tte of this ExtendedJob.  # noqa: E501
        :type: int
        """

        self._tte = tte

    @property
    def private_tm_key(self):
        """Gets the private_tm_key of this ExtendedJob.  # noqa: E501


        :return: The private_tm_key of this ExtendedJob.  # noqa: E501
        :rtype: list[str]
        """
        return self._private_tm_key

    @private_tm_key.setter
    def private_tm_key(self, private_tm_key):
        """Sets the private_tm_key of this ExtendedJob.


        :param private_tm_key: The private_tm_key of this ExtendedJob.  # noqa: E501
        :type: list[str]
        """

        self._private_tm_key = private_tm_key

    @property
    def warnings_count(self):
        """Gets the warnings_count of this ExtendedJob.  # noqa: E501


        :return: The warnings_count of this ExtendedJob.  # noqa: E501
        :rtype: int
        """
        return self._warnings_count

    @warnings_count.setter
    def warnings_count(self, warnings_count):
        """Sets the warnings_count of this ExtendedJob.


        :param warnings_count: The warnings_count of this ExtendedJob.  # noqa: E501
        :type: int
        """

        self._warnings_count = warnings_count

    @property
    def warning_segments(self):
        """Gets the warning_segments of this ExtendedJob.  # noqa: E501


        :return: The warning_segments of this ExtendedJob.  # noqa: E501
        :rtype: list[int]
        """
        return self._warning_segments

    @warning_segments.setter
    def warning_segments(self, warning_segments):
        """Sets the warning_segments of this ExtendedJob.


        :param warning_segments: The warning_segments of this ExtendedJob.  # noqa: E501
        :type: list[int]
        """

        self._warning_segments = warning_segments

    @property
    def outsource(self):
        """Gets the outsource of this ExtendedJob.  # noqa: E501


        :return: The outsource of this ExtendedJob.  # noqa: E501
        :rtype: OutsourceConfirmation
        """
        return self._outsource

    @outsource.setter
    def outsource(self, outsource):
        """Sets the outsource of this ExtendedJob.


        :param outsource: The outsource of this ExtendedJob.  # noqa: E501
        :type: OutsourceConfirmation
        """

        self._outsource = outsource

    @property
    def translator(self):
        """Gets the translator of this ExtendedJob.  # noqa: E501


        :return: The translator of this ExtendedJob.  # noqa: E501
        :rtype: Translator
        """
        return self._translator

    @translator.setter
    def translator(self, translator):
        """Sets the translator of this ExtendedJob.


        :param translator: The translator of this ExtendedJob.  # noqa: E501
        :type: Translator
        """

        self._translator = translator

    @property
    def urls(self):
        """Gets the urls of this ExtendedJob.  # noqa: E501


        :return: The urls of this ExtendedJob.  # noqa: E501
        :rtype: JobUrl
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this ExtendedJob.


        :param urls: The urls of this ExtendedJob.  # noqa: E501
        :type: JobUrl
        """

        self._urls = urls

    @property
    def stats(self):
        """Gets the stats of this ExtendedJob.  # noqa: E501


        :return: The stats of this ExtendedJob.  # noqa: E501
        :rtype: Stats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this ExtendedJob.


        :param stats: The stats of this ExtendedJob.  # noqa: E501
        :type: Stats
        """

        self._stats = stats

    @property
    def quality_summary(self):
        """Gets the quality_summary of this ExtendedJob.  # noqa: E501


        :return: The quality_summary of this ExtendedJob.  # noqa: E501
        :rtype: QualitySummary
        """
        return self._quality_summary

    @quality_summary.setter
    def quality_summary(self, quality_summary):
        """Sets the quality_summary of this ExtendedJob.


        :param quality_summary: The quality_summary of this ExtendedJob.  # noqa: E501
        :type: QualitySummary
        """

        self._quality_summary = quality_summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtendedJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendedJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
