# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from matecat_api.api_client import ApiClient


class TranslationVersionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_jobs_id_job_password_segments_id_segment_translation_versions_get(self, id_job, password, id_segment, **kwargs):  # noqa: E501
        """Segment versions  # noqa: E501

        Segment versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_versions_get(id_job, password, id_segment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :return: TranslationVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_id_job_password_segments_id_segment_translation_versions_get_with_http_info(id_job, password, id_segment, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_id_job_password_segments_id_segment_translation_versions_get_with_http_info(id_job, password, id_segment, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_id_job_password_segments_id_segment_translation_versions_get_with_http_info(self, id_job, password, id_segment, **kwargs):  # noqa: E501
        """Segment versions  # noqa: E501

        Segment versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_versions_get_with_http_info(id_job, password, id_segment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :return: TranslationVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_job', 'password', 'id_segment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_id_job_password_segments_id_segment_translation_versions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_versions_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_versions_get`")  # noqa: E501
        # verify the required parameter 'id_segment' is set
        if ('id_segment' not in params or
                params['id_segment'] is None):
            raise ValueError("Missing the required parameter `id_segment` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_versions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501
        if 'id_segment' in params:
            path_params['id_segment'] = params['id_segment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{id_job}/{password}/segments/{id_segment}/translation-versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TranslationVersions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_id_job_password_segments_id_segment_translation_versions_version_number_get(self, id_job, password, id_segment, version_number, **kwargs):  # noqa: E501
        """Get a Segment translation version  # noqa: E501

        Get a Segment translation version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_versions_version_number_get(id_job, password, id_segment, version_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :param str version_number: The version number (required)
        :return: TranslationVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_id_job_password_segments_id_segment_translation_versions_version_number_get_with_http_info(id_job, password, id_segment, version_number, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_id_job_password_segments_id_segment_translation_versions_version_number_get_with_http_info(id_job, password, id_segment, version_number, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_id_job_password_segments_id_segment_translation_versions_version_number_get_with_http_info(self, id_job, password, id_segment, version_number, **kwargs):  # noqa: E501
        """Get a Segment translation version  # noqa: E501

        Get a Segment translation version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_versions_version_number_get_with_http_info(id_job, password, id_segment, version_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :param str version_number: The version number (required)
        :return: TranslationVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_job', 'password', 'id_segment', 'version_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_id_job_password_segments_id_segment_translation_versions_version_number_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_versions_version_number_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_versions_version_number_get`")  # noqa: E501
        # verify the required parameter 'id_segment' is set
        if ('id_segment' not in params or
                params['id_segment'] is None):
            raise ValueError("Missing the required parameter `id_segment` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_versions_version_number_get`")  # noqa: E501
        # verify the required parameter 'version_number' is set
        if ('version_number' not in params or
                params['version_number'] is None):
            raise ValueError("Missing the required parameter `version_number` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_versions_version_number_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501
        if 'id_segment' in params:
            path_params['id_segment'] = params['id_segment']  # noqa: E501
        if 'version_number' in params:
            path_params['version_number'] = params['version_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{id_job}/{password}/segments/{id_segment}/translation-versions/{version_number}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TranslationVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_id_job_password_translation_versions_get(self, id_job, password, **kwargs):  # noqa: E501
        """Project translation versions  # noqa: E501

        Project translation versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_translation_versions_get(id_job, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :return: TranslationVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_id_job_password_translation_versions_get_with_http_info(id_job, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_id_job_password_translation_versions_get_with_http_info(id_job, password, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_id_job_password_translation_versions_get_with_http_info(self, id_job, password, **kwargs):  # noqa: E501
        """Project translation versions  # noqa: E501

        Project translation versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_translation_versions_get_with_http_info(id_job, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :return: TranslationVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_job', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_id_job_password_translation_versions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_jobs_id_job_password_translation_versions_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_jobs_id_job_password_translation_versions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{id_job}/{password}/translation-versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TranslationVersions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
