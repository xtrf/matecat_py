# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from matecat_api.api_client import ApiClient


class ProjectApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_change_project_password_post(self, id_project, old_pass, new_pass, **kwargs):  # noqa: E501
        """Change password  # noqa: E501

        Change the password of a project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_change_project_password_post(id_project, old_pass, new_pass, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_project: (required)
        :param str old_pass: (required)
        :param str new_pass: (required)
        :return: ChangePasswordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_change_project_password_post_with_http_info(id_project, old_pass, new_pass, **kwargs)  # noqa: E501
        else:
            (data) = self.api_change_project_password_post_with_http_info(id_project, old_pass, new_pass, **kwargs)  # noqa: E501
            return data

    def api_change_project_password_post_with_http_info(self, id_project, old_pass, new_pass, **kwargs):  # noqa: E501
        """Change password  # noqa: E501

        Change the password of a project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_change_project_password_post_with_http_info(id_project, old_pass, new_pass, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_project: (required)
        :param str old_pass: (required)
        :param str new_pass: (required)
        :return: ChangePasswordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'old_pass', 'new_pass']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_change_project_password_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_change_project_password_post`")  # noqa: E501
        # verify the required parameter 'old_pass' is set
        if ('old_pass' not in params or
                params['old_pass'] is None):
            raise ValueError("Missing the required parameter `old_pass` when calling `api_change_project_password_post`")  # noqa: E501
        # verify the required parameter 'new_pass' is set
        if ('new_pass' not in params or
                params['new_pass'] is None):
            raise ValueError("Missing the required parameter `new_pass` when calling `api_change_project_password_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id_project' in params:
            form_params.append(('id_project', params['id_project']))  # noqa: E501
        if 'old_pass' in params:
            form_params.append(('old_pass', params['old_pass']))  # noqa: E501
        if 'new_pass' in params:
            form_params.append(('new_pass', params['new_pass']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/change_project_password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangePasswordResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_status_get(self, id_project, project_pass, **kwargs):  # noqa: E501
        """Retrieve the status of a project  # noqa: E501

        Check Status of a created Project With HTTP POST ( application/x-www-form-urlencoded ) protocol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_status_get(id_project, project_pass, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_project: The identifier of the project, should be the value returned by the /new method. (required)
        :param str project_pass: The password associated with the project, should be the value returned by the /new method ( associated with the id_project ) (required)
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_status_get_with_http_info(id_project, project_pass, **kwargs)  # noqa: E501
        else:
            (data) = self.api_status_get_with_http_info(id_project, project_pass, **kwargs)  # noqa: E501
            return data

    def api_status_get_with_http_info(self, id_project, project_pass, **kwargs):  # noqa: E501
        """Retrieve the status of a project  # noqa: E501

        Check Status of a created Project With HTTP POST ( application/x-www-form-urlencoded ) protocol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_status_get_with_http_info(id_project, project_pass, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_project: The identifier of the project, should be the value returned by the /new method. (required)
        :param str project_pass: The password associated with the project, should be the value returned by the /new method ( associated with the id_project ) (required)
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'project_pass']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_status_get`")  # noqa: E501
        # verify the required parameter 'project_pass' is set
        if ('project_pass' not in params or
                params['project_pass'] is None):
            raise ValueError("Missing the required parameter `project_pass` when calling `api_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_project' in params:
            query_params.append(('id_project', params['id_project']))  # noqa: E501
        if 'project_pass' in params:
            query_params.append(('project_pass', params['project_pass']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_new_post(self, files, project_name, source_lang, target_lang, tms_engine, mt_engine, private_tm_key, subject, segmentation_rule, owner_email, due_date, id_team, lexiqa, speech2text, get_public_matches, pretranslate_100, metadata, **kwargs):  # noqa: E501
        """Create new Project on Matecat in detached mode  # noqa: E501

        Create new Project on Matecat With HTTP POST ( multipart/form-data ) protocol. new has a maximum file size limit of 200 MB per file and a max number of files of 600. This API will process the project creation in background. Client can poll the v1 project creation status API to be notified when the project is actually created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_new_post(files, project_name, source_lang, target_lang, tms_engine, mt_engine, private_tm_key, subject, segmentation_rule, owner_email, due_date, id_team, lexiqa, speech2text, get_public_matches, pretranslate_100, metadata, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str files: (required)
        :param str project_name: (required)
        :param str source_lang: (required)
        :param str target_lang: (required)
        :param int tms_engine: (required)
        :param int mt_engine: (required)
        :param str private_tm_key: (required)
        :param str subject: (required)
        :param str segmentation_rule: (required)
        :param str owner_email: (required)
        :param str due_date: (required)
        :param str id_team: (required)
        :param str lexiqa: (required)
        :param int speech2text: (required)
        :param str get_public_matches: (required)
        :param int pretranslate_100: (required)
        :param str metadata: (required)
        :return: NewProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_new_post_with_http_info(files, project_name, source_lang, target_lang, tms_engine, mt_engine, private_tm_key, subject, segmentation_rule, owner_email, due_date, id_team, lexiqa, speech2text, get_public_matches, pretranslate_100, metadata, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_new_post_with_http_info(files, project_name, source_lang, target_lang, tms_engine, mt_engine, private_tm_key, subject, segmentation_rule, owner_email, due_date, id_team, lexiqa, speech2text, get_public_matches, pretranslate_100, metadata, **kwargs)  # noqa: E501
            return data

    def api_v1_new_post_with_http_info(self, files, project_name, source_lang, target_lang, tms_engine, mt_engine, private_tm_key, subject, segmentation_rule, owner_email, due_date, id_team, lexiqa, speech2text, get_public_matches, pretranslate_100, metadata, **kwargs):  # noqa: E501
        """Create new Project on Matecat in detached mode  # noqa: E501

        Create new Project on Matecat With HTTP POST ( multipart/form-data ) protocol. new has a maximum file size limit of 200 MB per file and a max number of files of 600. This API will process the project creation in background. Client can poll the v1 project creation status API to be notified when the project is actually created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_new_post_with_http_info(files, project_name, source_lang, target_lang, tms_engine, mt_engine, private_tm_key, subject, segmentation_rule, owner_email, due_date, id_team, lexiqa, speech2text, get_public_matches, pretranslate_100, metadata, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str files: (required)
        :param str project_name: (required)
        :param str source_lang: (required)
        :param str target_lang: (required)
        :param int tms_engine: (required)
        :param int mt_engine: (required)
        :param str private_tm_key: (required)
        :param str subject: (required)
        :param str segmentation_rule: (required)
        :param str owner_email: (required)
        :param str due_date: (required)
        :param str id_team: (required)
        :param str lexiqa: (required)
        :param int speech2text: (required)
        :param str get_public_matches: (required)
        :param int pretranslate_100: (required)
        :param str metadata: (required)
        :return: NewProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['files', 'project_name', 'source_lang', 'target_lang', 'tms_engine', 'mt_engine', 'private_tm_key', 'subject', 'segmentation_rule', 'owner_email', 'due_date', 'id_team', 'lexiqa', 'speech2text', 'get_public_matches', 'pretranslate_100', 'metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_new_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'files' is set
        if ('files' not in params or
                params['files'] is None):
            raise ValueError("Missing the required parameter `files` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'source_lang' is set
        if ('source_lang' not in params or
                params['source_lang'] is None):
            raise ValueError("Missing the required parameter `source_lang` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'target_lang' is set
        if ('target_lang' not in params or
                params['target_lang'] is None):
            raise ValueError("Missing the required parameter `target_lang` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'tms_engine' is set
        if ('tms_engine' not in params or
                params['tms_engine'] is None):
            raise ValueError("Missing the required parameter `tms_engine` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'mt_engine' is set
        if ('mt_engine' not in params or
                params['mt_engine'] is None):
            raise ValueError("Missing the required parameter `mt_engine` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'private_tm_key' is set
        if ('private_tm_key' not in params or
                params['private_tm_key'] is None):
            raise ValueError("Missing the required parameter `private_tm_key` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'segmentation_rule' is set
        if ('segmentation_rule' not in params or
                params['segmentation_rule'] is None):
            raise ValueError("Missing the required parameter `segmentation_rule` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'owner_email' is set
        if ('owner_email' not in params or
                params['owner_email'] is None):
            raise ValueError("Missing the required parameter `owner_email` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'due_date' is set
        if ('due_date' not in params or
                params['due_date'] is None):
            raise ValueError("Missing the required parameter `due_date` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'id_team' is set
        if ('id_team' not in params or
                params['id_team'] is None):
            raise ValueError("Missing the required parameter `id_team` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'lexiqa' is set
        if ('lexiqa' not in params or
                params['lexiqa'] is None):
            raise ValueError("Missing the required parameter `lexiqa` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'speech2text' is set
        if ('speech2text' not in params or
                params['speech2text'] is None):
            raise ValueError("Missing the required parameter `speech2text` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'get_public_matches' is set
        if ('get_public_matches' not in params or
                params['get_public_matches'] is None):
            raise ValueError("Missing the required parameter `get_public_matches` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'pretranslate_100' is set
        if ('pretranslate_100' not in params or
                params['pretranslate_100'] is None):
            raise ValueError("Missing the required parameter `pretranslate_100` when calling `api_v1_new_post`")  # noqa: E501
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params or
                params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `api_v1_new_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'files' in params:
            local_var_files['files'] = params['files']  # noqa: E501
        if 'project_name' in params:
            form_params.append(('project_name', params['project_name']))  # noqa: E501
        if 'source_lang' in params:
            form_params.append(('source_lang', params['source_lang']))  # noqa: E501
        if 'target_lang' in params:
            form_params.append(('target_lang', params['target_lang']))  # noqa: E501
        if 'tms_engine' in params:
            form_params.append(('tms_engine', params['tms_engine']))  # noqa: E501
        if 'mt_engine' in params:
            form_params.append(('mt_engine', params['mt_engine']))  # noqa: E501
        if 'private_tm_key' in params:
            form_params.append(('private_tm_key', params['private_tm_key']))  # noqa: E501
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'segmentation_rule' in params:
            form_params.append(('segmentation_rule', params['segmentation_rule']))  # noqa: E501
        if 'owner_email' in params:
            form_params.append(('owner_email', params['owner_email']))  # noqa: E501
        if 'due_date' in params:
            form_params.append(('due_date', params['due_date']))  # noqa: E501
        if 'id_team' in params:
            form_params.append(('id_team', params['id_team']))  # noqa: E501
        if 'lexiqa' in params:
            form_params.append(('lexiqa', params['lexiqa']))  # noqa: E501
        if 'speech2text' in params:
            form_params.append(('speech2text', params['speech2text']))  # noqa: E501
        if 'get_public_matches' in params:
            form_params.append(('get_public_matches', params['get_public_matches']))  # noqa: E501
        if 'pretranslate_100' in params:
            form_params.append(('pretranslate_100', params['pretranslate_100']))  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/new', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_active_post(self, id_project, password, **kwargs):  # noqa: E501
        """Active API  # noqa: E501

        API to active a Project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_active_post(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: ChangeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_active_post_with_http_info(id_project, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_active_post_with_http_info(id_project, password, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_active_post_with_http_info(self, id_project, password, **kwargs):  # noqa: E501
        """Active API  # noqa: E501

        API to active a Project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_active_post_with_http_info(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: ChangeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_active_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_active_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_active_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/active', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_archive_post(self, id_project, password, **kwargs):  # noqa: E501
        """Archive API  # noqa: E501

        API to archive a Project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_archive_post(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: ChangeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_archive_post_with_http_info(id_project, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_archive_post_with_http_info(id_project, password, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_archive_post_with_http_info(self, id_project, password, **kwargs):  # noqa: E501
        """Archive API  # noqa: E501

        API to archive a Project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_archive_post_with_http_info(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: ChangeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_archive_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_archive_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_archive_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/archive', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_cancel_post(self, id_project, password, **kwargs):  # noqa: E501
        """Cancel API  # noqa: E501

        API to cancel a Project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_cancel_post(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: ChangeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_cancel_post_with_http_info(id_project, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_cancel_post_with_http_info(id_project, password, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_cancel_post_with_http_info(self, id_project, password, **kwargs):  # noqa: E501
        """Cancel API  # noqa: E501

        API to cancel a Project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_cancel_post_with_http_info(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: ChangeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_cancel_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_cancel_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_cancel_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_completion_status_get(self, id_project, password, **kwargs):  # noqa: E501
        """Shows project completion statuses  # noqa: E501

        Shows project completion statuses, it is related to the phases defined by the click on Marked As Completed button.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_completion_status_get(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: CompletionStatusItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_completion_status_get_with_http_info(id_project, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_completion_status_get_with_http_info(id_project, password, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_completion_status_get_with_http_info(self, id_project, password, **kwargs):  # noqa: E501
        """Shows project completion statuses  # noqa: E501

        Shows project completion statuses, it is related to the phases defined by the click on Marked As Completed button.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_completion_status_get_with_http_info(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: CompletionStatusItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_completion_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_completion_status_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_completion_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/completion_status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompletionStatusItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_creation_status_get(self, id_project, password, **kwargs):  # noqa: E501
        """Shows creation status of a project  # noqa: E501

        Shows creation status of a project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_creation_status_get(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: ProjectCreationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_creation_status_get_with_http_info(id_project, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_creation_status_get_with_http_info(id_project, password, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_creation_status_get_with_http_info(self, id_project, password, **kwargs):  # noqa: E501
        """Shows creation status of a project  # noqa: E501

        Shows creation status of a project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_creation_status_get_with_http_info(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: ProjectCreationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_creation_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_creation_status_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_creation_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/creation_status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectCreationStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_due_date_delete(self, id_project, password, **kwargs):  # noqa: E501
        """Delete due date  # noqa: E501

        Delete due date given a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_due_date_delete(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_due_date_delete_with_http_info(id_project, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_due_date_delete_with_http_info(id_project, password, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_due_date_delete_with_http_info(self, id_project, password, **kwargs):  # noqa: E501
        """Delete due date  # noqa: E501

        Delete due date given a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_due_date_delete_with_http_info(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_due_date_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_due_date_delete`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_due_date_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/due_date', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_due_date_post(self, due_date, id_project, password, **kwargs):  # noqa: E501
        """Create due date  # noqa: E501

        Create due date given a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_due_date_post(due_date, id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int due_date: (required)
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_due_date_post_with_http_info(due_date, id_project, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_due_date_post_with_http_info(due_date, id_project, password, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_due_date_post_with_http_info(self, due_date, id_project, password, **kwargs):  # noqa: E501
        """Create due date  # noqa: E501

        Create due date given a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_due_date_post_with_http_info(due_date, id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int due_date: (required)
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['due_date', 'id_project', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_due_date_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'due_date' is set
        if ('due_date' not in params or
                params['due_date'] is None):
            raise ValueError("Missing the required parameter `due_date` when calling `api_v2_projects_id_project_password_due_date_post`")  # noqa: E501
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_due_date_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_due_date_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'due_date' in params:
            form_params.append(('due_date', params['due_date']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/due_date', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_due_date_put(self, body, id_project, password, **kwargs):  # noqa: E501
        """Update due date  # noqa: E501

        Update due date given a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_due_date_put(body, id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body2 body: Date you want to set as due date. Date must be in the future (required)
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_due_date_put_with_http_info(body, id_project, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_due_date_put_with_http_info(body, id_project, password, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_due_date_put_with_http_info(self, body, id_project, password, **kwargs):  # noqa: E501
        """Update due date  # noqa: E501

        Update due date given a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_due_date_put_with_http_info(body, id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body2 body: Date you want to set as due date. Date must be in the future (required)
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id_project', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_due_date_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_projects_id_project_password_due_date_put`")  # noqa: E501
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_due_date_put`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_due_date_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/due_date', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_get(self, id_project, password, **kwargs):  # noqa: E501
        """Get project information  # noqa: E501

        Retrieve information on the specified Project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_get(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_project: The project ID (required)
        :param str password: The project Password (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_get_with_http_info(id_project, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_get_with_http_info(id_project, password, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_get_with_http_info(self, id_project, password, **kwargs):  # noqa: E501
        """Get project information  # noqa: E501

        Retrieve information on the specified Project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_get_with_http_info(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_project: The project ID (required)
        :param str password: The project Password (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post(self, id_project, password, id_job, job_password, num_split, **kwargs):  # noqa: E501
        """Split Job  # noqa: E501

        Check a job can be splitted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post(id_project, password, id_job, job_password, num_split, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :param str id_job: The id of the job (required)
        :param str job_password: The password of the job (required)
        :param int num_split: Number of chuck you want to split (required)
        :param list[float] split_values:
        :return: Split
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post_with_http_info(id_project, password, id_job, job_password, num_split, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post_with_http_info(id_project, password, id_job, job_password, num_split, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post_with_http_info(self, id_project, password, id_job, job_password, num_split, **kwargs):  # noqa: E501
        """Split Job  # noqa: E501

        Check a job can be splitted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post_with_http_info(id_project, password, id_job, job_password, num_split, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :param str id_job: The id of the job (required)
        :param str job_password: The password of the job (required)
        :param int num_split: Number of chuck you want to split (required)
        :param list[float] split_values:
        :return: Split
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'password', 'id_job', 'job_password', 'num_split', 'split_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post`")  # noqa: E501
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post`")  # noqa: E501
        # verify the required parameter 'job_password' is set
        if ('job_password' not in params or
                params['job_password'] is None):
            raise ValueError("Missing the required parameter `job_password` when calling `api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post`")  # noqa: E501
        # verify the required parameter 'num_split' is set
        if ('num_split' not in params or
                params['num_split'] is None):
            raise ValueError("Missing the required parameter `num_split` when calling `api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_apply_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501
        if 'job_password' in params:
            path_params['job_password'] = params['job_password']  # noqa: E501
        if 'num_split' in params:
            path_params['num_split'] = params['num_split']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'split_values' in params:
            form_params.append(('split_values', params['split_values']))  # noqa: E501
            collection_formats['split_values'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/jobs/{id_job}/{job_password}/split/{num_split}/apply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Split',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post(self, id_project, password, id_job, job_password, num_split, **kwargs):  # noqa: E501
        """Split Check  # noqa: E501

        Check a job can be splitted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post(id_project, password, id_job, job_password, num_split, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :param str id_job: The id of the job (required)
        :param str job_password: The password of the job (required)
        :param int num_split: Number of chuck you want to split (required)
        :return: Split
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post_with_http_info(id_project, password, id_job, job_password, num_split, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post_with_http_info(id_project, password, id_job, job_password, num_split, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post_with_http_info(self, id_project, password, id_job, job_password, num_split, **kwargs):  # noqa: E501
        """Split Check  # noqa: E501

        Check a job can be splitted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post_with_http_info(id_project, password, id_job, job_password, num_split, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :param str id_job: The id of the job (required)
        :param str job_password: The password of the job (required)
        :param int num_split: Number of chuck you want to split (required)
        :return: Split
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'password', 'id_job', 'job_password', 'num_split']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post`")  # noqa: E501
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post`")  # noqa: E501
        # verify the required parameter 'job_password' is set
        if ('job_password' not in params or
                params['job_password'] is None):
            raise ValueError("Missing the required parameter `job_password` when calling `api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post`")  # noqa: E501
        # verify the required parameter 'num_split' is set
        if ('num_split' not in params or
                params['num_split'] is None):
            raise ValueError("Missing the required parameter `num_split` when calling `api_v2_projects_id_project_password_jobs_id_job_job_password_split_num_split_check_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501
        if 'job_password' in params:
            path_params['job_password'] = params['job_password']  # noqa: E501
        if 'num_split' in params:
            path_params['num_split'] = params['num_split']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/jobs/{id_job}/{job_password}/split/{num_split}/check', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Split',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_jobs_id_job_merge_post(self, id_project, password, id_job, **kwargs):  # noqa: E501
        """Merge  # noqa: E501

        Merge a splitted project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_jobs_id_job_merge_post(id_project, password, id_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :param str id_job: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_jobs_id_job_merge_post_with_http_info(id_project, password, id_job, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_jobs_id_job_merge_post_with_http_info(id_project, password, id_job, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_jobs_id_job_merge_post_with_http_info(self, id_project, password, id_job, **kwargs):  # noqa: E501
        """Merge  # noqa: E501

        Merge a splitted project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_jobs_id_job_merge_post_with_http_info(id_project, password, id_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :param str id_job: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'password', 'id_job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_jobs_id_job_merge_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_jobs_id_job_merge_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_jobs_id_job_merge_post`")  # noqa: E501
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_projects_id_project_password_jobs_id_job_merge_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/jobs/{id_job}/merge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_projects_id_project_password_urls_get(self, id_project, password, **kwargs):  # noqa: E501
        """Urls of a Project  # noqa: E501

        Urls of a Project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_urls_get(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: Urls
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_projects_id_project_password_urls_get_with_http_info(id_project, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_projects_id_project_password_urls_get_with_http_info(id_project, password, **kwargs)  # noqa: E501
            return data

    def api_v2_projects_id_project_password_urls_get_with_http_info(self, id_project, password, **kwargs):  # noqa: E501
        """Urls of a Project  # noqa: E501

        Urls of a Project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_projects_id_project_password_urls_get_with_http_info(id_project, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_project: The id of the project (required)
        :param str password: The password of the project (required)
        :return: Urls
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_project', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_projects_id_project_password_urls_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_projects_id_project_password_urls_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_projects_id_project_password_urls_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/projects/{id_project}/{password}/urls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Urls',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
