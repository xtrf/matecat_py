# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from matecat_api.api_client import ApiClient


class TeamsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_teams_get(self, **kwargs):  # noqa: E501
        """List available teams  # noqa: E501

        Returns a list of all teams the current user is member of.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TeamList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_teams_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_teams_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_teams_get_with_http_info(self, **kwargs):  # noqa: E501
        """List available teams  # noqa: E501

        Returns a list of all teams the current user is member of.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TeamList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_teams_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_teams_id_team_members_get(self, id_team, **kwargs):  # noqa: E501
        """List team members  # noqa: E501

        List team members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_members_get(id_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :return: TeamMembersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_teams_id_team_members_get_with_http_info(id_team, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_teams_id_team_members_get_with_http_info(id_team, **kwargs)  # noqa: E501
            return data

    def api_v2_teams_id_team_members_get_with_http_info(self, id_team, **kwargs):  # noqa: E501
        """List team members  # noqa: E501

        List team members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_members_get_with_http_info(id_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :return: TeamMembersList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_teams_id_team_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_team' is set
        if ('id_team' not in params or
                params['id_team'] is None):
            raise ValueError("Missing the required parameter `id_team` when calling `api_v2_teams_id_team_members_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_team' in params:
            path_params['id_team'] = params['id_team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/teams/{id_team}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamMembersList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_teams_id_team_members_id_member_delete(self, id_team, id_member, **kwargs):  # noqa: E501
        """List team members  # noqa: E501

        List team members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_members_id_member_delete(id_team, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :param int id_member: Id of the user to remove from team (required)
        :return: TeamMembersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_teams_id_team_members_id_member_delete_with_http_info(id_team, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_teams_id_team_members_id_member_delete_with_http_info(id_team, id_member, **kwargs)  # noqa: E501
            return data

    def api_v2_teams_id_team_members_id_member_delete_with_http_info(self, id_team, id_member, **kwargs):  # noqa: E501
        """List team members  # noqa: E501

        List team members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_members_id_member_delete_with_http_info(id_team, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :param int id_member: Id of the user to remove from team (required)
        :return: TeamMembersList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_team', 'id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_teams_id_team_members_id_member_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_team' is set
        if ('id_team' not in params or
                params['id_team'] is None):
            raise ValueError("Missing the required parameter `id_team` when calling `api_v2_teams_id_team_members_id_member_delete`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `api_v2_teams_id_team_members_id_member_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_team' in params:
            path_params['id_team'] = params['id_team']  # noqa: E501
        if 'id_member' in params:
            path_params['id_member'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/teams/{id_team}/members/{id_member}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamMembersList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_teams_id_team_members_post(self, id_team, **kwargs):  # noqa: E501
        """Create new team memberships  # noqa: E501

        Create new team memberships.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_members_post(id_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :param list[str] members:
        :return: TeamMembersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_teams_id_team_members_post_with_http_info(id_team, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_teams_id_team_members_post_with_http_info(id_team, **kwargs)  # noqa: E501
            return data

    def api_v2_teams_id_team_members_post_with_http_info(self, id_team, **kwargs):  # noqa: E501
        """Create new team memberships  # noqa: E501

        Create new team memberships.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_members_post_with_http_info(id_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :param list[str] members:
        :return: TeamMembersList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_team', 'members']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_teams_id_team_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_team' is set
        if ('id_team' not in params or
                params['id_team'] is None):
            raise ValueError("Missing the required parameter `id_team` when calling `api_v2_teams_id_team_members_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_team' in params:
            path_params['id_team'] = params['id_team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'members' in params:
            form_params.append(('members', params['members']))  # noqa: E501
            collection_formats['members'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/teams/{id_team}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamMembersList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_teams_id_team_projects_get(self, id_team, **kwargs):  # noqa: E501
        """Get the list of projects in a team  # noqa: E501

        Get the list of projects in a team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_projects_get(id_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :return: ProjectList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_teams_id_team_projects_get_with_http_info(id_team, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_teams_id_team_projects_get_with_http_info(id_team, **kwargs)  # noqa: E501
            return data

    def api_v2_teams_id_team_projects_get_with_http_info(self, id_team, **kwargs):  # noqa: E501
        """Get the list of projects in a team  # noqa: E501

        Get the list of projects in a team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_projects_get_with_http_info(id_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :return: ProjectList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_teams_id_team_projects_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_team' is set
        if ('id_team' not in params or
                params['id_team'] is None):
            raise ValueError("Missing the required parameter `id_team` when calling `api_v2_teams_id_team_projects_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_team' in params:
            path_params['id_team'] = params['id_team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/teams/{id_team}/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_teams_id_team_projects_id_project_get(self, id_team, id_project, **kwargs):  # noqa: E501
        """Get a project in a team scope  # noqa: E501

        Get a project in a team scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_projects_id_project_get(id_team, id_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :param int id_project: (required)
        :return: ProjectItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_teams_id_team_projects_id_project_get_with_http_info(id_team, id_project, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_teams_id_team_projects_id_project_get_with_http_info(id_team, id_project, **kwargs)  # noqa: E501
            return data

    def api_v2_teams_id_team_projects_id_project_get_with_http_info(self, id_team, id_project, **kwargs):  # noqa: E501
        """Get a project in a team scope  # noqa: E501

        Get a project in a team scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_projects_id_project_get_with_http_info(id_team, id_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :param int id_project: (required)
        :return: ProjectItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_team', 'id_project']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_teams_id_team_projects_id_project_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_team' is set
        if ('id_team' not in params or
                params['id_team'] is None):
            raise ValueError("Missing the required parameter `id_team` when calling `api_v2_teams_id_team_projects_id_project_get`")  # noqa: E501
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_teams_id_team_projects_id_project_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_team' in params:
            path_params['id_team'] = params['id_team']  # noqa: E501
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/teams/{id_team}/projects/{id_project}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_teams_id_team_projects_id_project_put(self, body, id_team, id_project, **kwargs):  # noqa: E501
        """Update a team's project  # noqa: E501

        Updates a team's project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_projects_id_project_put(body, id_team, id_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body9 body: Parameters in JSON Body (required)
        :param int id_team: (required)
        :param int id_project: (required)
        :return: ProjectItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_teams_id_team_projects_id_project_put_with_http_info(body, id_team, id_project, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_teams_id_team_projects_id_project_put_with_http_info(body, id_team, id_project, **kwargs)  # noqa: E501
            return data

    def api_v2_teams_id_team_projects_id_project_put_with_http_info(self, body, id_team, id_project, **kwargs):  # noqa: E501
        """Update a team's project  # noqa: E501

        Updates a team's project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_projects_id_project_put_with_http_info(body, id_team, id_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body9 body: Parameters in JSON Body (required)
        :param int id_team: (required)
        :param int id_project: (required)
        :return: ProjectItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id_team', 'id_project']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_teams_id_team_projects_id_project_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_teams_id_team_projects_id_project_put`")  # noqa: E501
        # verify the required parameter 'id_team' is set
        if ('id_team' not in params or
                params['id_team'] is None):
            raise ValueError("Missing the required parameter `id_team` when calling `api_v2_teams_id_team_projects_id_project_put`")  # noqa: E501
        # verify the required parameter 'id_project' is set
        if ('id_project' not in params or
                params['id_project'] is None):
            raise ValueError("Missing the required parameter `id_project` when calling `api_v2_teams_id_team_projects_id_project_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_team' in params:
            path_params['id_team'] = params['id_team']  # noqa: E501
        if 'id_project' in params:
            path_params['id_project'] = params['id_project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/teams/{id_team}/projects/{id_project}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_teams_id_team_projects_project_name_get(self, id_team, project_name, **kwargs):  # noqa: E501
        """Get projects in a team scope  # noqa: E501

        Get projects in a team scope by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_projects_project_name_get(id_team, project_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :param str project_name: The name can also be a part of a project name (required)
        :return: ProjectsItems
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_teams_id_team_projects_project_name_get_with_http_info(id_team, project_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_teams_id_team_projects_project_name_get_with_http_info(id_team, project_name, **kwargs)  # noqa: E501
            return data

    def api_v2_teams_id_team_projects_project_name_get_with_http_info(self, id_team, project_name, **kwargs):  # noqa: E501
        """Get projects in a team scope  # noqa: E501

        Get projects in a team scope by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_projects_project_name_get_with_http_info(id_team, project_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_team: (required)
        :param str project_name: The name can also be a part of a project name (required)
        :return: ProjectsItems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_team', 'project_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_teams_id_team_projects_project_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_team' is set
        if ('id_team' not in params or
                params['id_team'] is None):
            raise ValueError("Missing the required parameter `id_team` when calling `api_v2_teams_id_team_projects_project_name_get`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `api_v2_teams_id_team_projects_project_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_team' in params:
            path_params['id_team'] = params['id_team']  # noqa: E501
        if 'project_name' in params:
            path_params['project_name'] = params['project_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/teams/{id_team}/projects/{project_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectsItems',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_teams_id_team_put(self, body, id_team, **kwargs):  # noqa: E501
        """Update team  # noqa: E501

        Update team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_put(body, id_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body7 body: Parameters in JSON Body (required)
        :param int id_team: (required)
        :return: TeamItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_teams_id_team_put_with_http_info(body, id_team, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_teams_id_team_put_with_http_info(body, id_team, **kwargs)  # noqa: E501
            return data

    def api_v2_teams_id_team_put_with_http_info(self, body, id_team, **kwargs):  # noqa: E501
        """Update team  # noqa: E501

        Update team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_id_team_put_with_http_info(body, id_team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body7 body: Parameters in JSON Body (required)
        :param int id_team: (required)
        :return: TeamItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id_team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_teams_id_team_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_teams_id_team_put`")  # noqa: E501
        # verify the required parameter 'id_team' is set
        if ('id_team' not in params or
                params['id_team'] is None):
            raise ValueError("Missing the required parameter `id_team` when calling `api_v2_teams_id_team_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_team' in params:
            path_params['id_team'] = params['id_team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/teams/{id_team}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_teams_post(self, type, name, members, **kwargs):  # noqa: E501
        """Create a new team  # noqa: E501

        Creates a new team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_post(type, name, members, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: (required)
        :param str name: (required)
        :param list[str] members: (required)
        :return: TeamItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_teams_post_with_http_info(type, name, members, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_teams_post_with_http_info(type, name, members, **kwargs)  # noqa: E501
            return data

    def api_v2_teams_post_with_http_info(self, type, name, members, **kwargs):  # noqa: E501
        """Create a new team  # noqa: E501

        Creates a new team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_teams_post_with_http_info(type, name, members, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: (required)
        :param str name: (required)
        :param list[str] members: (required)
        :return: TeamItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'name', 'members']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_teams_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v2_teams_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v2_teams_post`")  # noqa: E501
        # verify the required parameter 'members' is set
        if ('members' not in params or
                params['members'] is None):
            raise ValueError("Missing the required parameter `members` when calling `api_v2_teams_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'members' in params:
            form_params.append(('members', params['members']))  # noqa: E501
            collection_formats['members'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/teams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
