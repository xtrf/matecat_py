# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from matecat_api.api_client import ApiClient


class GlossaryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_glossaries_export_tm_key_get(self, tm_key, **kwargs):  # noqa: E501
        """Download Glossary  # noqa: E501

        download Glossary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_glossaries_export_tm_key_get(tm_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tm_key: The tm key. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_glossaries_export_tm_key_get_with_http_info(tm_key, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_glossaries_export_tm_key_get_with_http_info(tm_key, **kwargs)  # noqa: E501
            return data

    def api_v2_glossaries_export_tm_key_get_with_http_info(self, tm_key, **kwargs):  # noqa: E501
        """Download Glossary  # noqa: E501

        download Glossary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_glossaries_export_tm_key_get_with_http_info(tm_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tm_key: The tm key. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tm_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_glossaries_export_tm_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tm_key' is set
        if ('tm_key' not in params or
                params['tm_key'] is None):
            raise ValueError("Missing the required parameter `tm_key` when calling `api_v2_glossaries_export_tm_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tm_key' in params:
            path_params['tm_key'] = params['tm_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/glossaries/export/{tm_key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_glossaries_import_post(self, files, name, tm_key, **kwargs):  # noqa: E501
        """Import Glossary  # noqa: E501

        Import glossary file (.xlsx)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_glossaries_import_post(files, name, tm_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str files: (required)
        :param str name: (required)
        :param str tm_key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_glossaries_import_post_with_http_info(files, name, tm_key, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_glossaries_import_post_with_http_info(files, name, tm_key, **kwargs)  # noqa: E501
            return data

    def api_v2_glossaries_import_post_with_http_info(self, files, name, tm_key, **kwargs):  # noqa: E501
        """Import Glossary  # noqa: E501

        Import glossary file (.xlsx)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_glossaries_import_post_with_http_info(files, name, tm_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str files: (required)
        :param str name: (required)
        :param str tm_key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['files', 'name', 'tm_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_glossaries_import_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'files' is set
        if ('files' not in params or
                params['files'] is None):
            raise ValueError("Missing the required parameter `files` when calling `api_v2_glossaries_import_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v2_glossaries_import_post`")  # noqa: E501
        # verify the required parameter 'tm_key' is set
        if ('tm_key' not in params or
                params['tm_key'] is None):
            raise ValueError("Missing the required parameter `tm_key` when calling `api_v2_glossaries_import_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'files' in params:
            local_var_files['files'] = params['files']  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'tm_key' in params:
            form_params.append(('tm_key', params['tm_key']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/glossaries/import/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_glossaries_import_status_tm_key_get(self, tm_key, **kwargs):  # noqa: E501
        """Glossary Upload status.  # noqa: E501

        Glossary Upload status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_glossaries_import_status_tm_key_get(tm_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tm_key: The tm key. (required)
        :param str name: The file name.
        :return: UploadGlossaryStatusObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_glossaries_import_status_tm_key_get_with_http_info(tm_key, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_glossaries_import_status_tm_key_get_with_http_info(tm_key, **kwargs)  # noqa: E501
            return data

    def api_v2_glossaries_import_status_tm_key_get_with_http_info(self, tm_key, **kwargs):  # noqa: E501
        """Glossary Upload status.  # noqa: E501

        Glossary Upload status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_glossaries_import_status_tm_key_get_with_http_info(tm_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tm_key: The tm key. (required)
        :param str name: The file name.
        :return: UploadGlossaryStatusObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tm_key', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_glossaries_import_status_tm_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tm_key' is set
        if ('tm_key' not in params or
                params['tm_key'] is None):
            raise ValueError("Missing the required parameter `tm_key` when calling `api_v2_glossaries_import_status_tm_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tm_key' in params:
            path_params['tm_key'] = params['tm_key']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/glossaries/import/status/{tm_key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadGlossaryStatusObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
