# coding: utf-8

"""
    MateCat API

    We developed a set of Rest API to let you integrate Matecat in your translation management system or in any other application. Use our API to create projects and check their status.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from matecat_api.api_client import ApiClient


class TranslationIssuesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_get(self, id_job, password, id_segment, id_issue, **kwargs):  # noqa: E501
        """Get comments  # noqa: E501

        Get comments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_get(id_job, password, id_segment, id_issue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :param str id_issue: The id of the issue (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_get_with_http_info(id_job, password, id_segment, id_issue, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_get_with_http_info(id_job, password, id_segment, id_issue, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_get_with_http_info(self, id_job, password, id_segment, id_issue, **kwargs):  # noqa: E501
        """Get comments  # noqa: E501

        Get comments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_get_with_http_info(id_job, password, id_segment, id_issue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :param str id_issue: The id of the issue (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_job', 'password', 'id_segment', 'id_issue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_get`")  # noqa: E501
        # verify the required parameter 'id_segment' is set
        if ('id_segment' not in params or
                params['id_segment'] is None):
            raise ValueError("Missing the required parameter `id_segment` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_get`")  # noqa: E501
        # verify the required parameter 'id_issue' is set
        if ('id_issue' not in params or
                params['id_issue'] is None):
            raise ValueError("Missing the required parameter `id_issue` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501
        if 'id_segment' in params:
            path_params['id_segment'] = params['id_segment']  # noqa: E501
        if 'id_issue' in params:
            path_params['id_issue'] = params['id_issue']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{id_job}/{password}/segments/{id_segment}/translation-issues/{id_issue}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post(self, comment, id_qa_entry, source_page, uid, id_job, password, id_segment, id_issue, **kwargs):  # noqa: E501
        """Add comment to a translation issue  # noqa: E501

        Create a comment translation issue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post(comment, id_qa_entry, source_page, uid, id_job, password, id_segment, id_issue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str comment: (required)
        :param str id_qa_entry: (required)
        :param str source_page: (required)
        :param str uid: (required)
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :param str id_issue: The id of the issue (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post_with_http_info(comment, id_qa_entry, source_page, uid, id_job, password, id_segment, id_issue, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post_with_http_info(comment, id_qa_entry, source_page, uid, id_job, password, id_segment, id_issue, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post_with_http_info(self, comment, id_qa_entry, source_page, uid, id_job, password, id_segment, id_issue, **kwargs):  # noqa: E501
        """Add comment to a translation issue  # noqa: E501

        Create a comment translation issue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post_with_http_info(comment, id_qa_entry, source_page, uid, id_job, password, id_segment, id_issue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str comment: (required)
        :param str id_qa_entry: (required)
        :param str source_page: (required)
        :param str uid: (required)
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :param str id_issue: The id of the issue (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment', 'id_qa_entry', 'source_page', 'uid', 'id_job', 'password', 'id_segment', 'id_issue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment' is set
        if ('comment' not in params or
                params['comment'] is None):
            raise ValueError("Missing the required parameter `comment` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post`")  # noqa: E501
        # verify the required parameter 'id_qa_entry' is set
        if ('id_qa_entry' not in params or
                params['id_qa_entry'] is None):
            raise ValueError("Missing the required parameter `id_qa_entry` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post`")  # noqa: E501
        # verify the required parameter 'source_page' is set
        if ('source_page' not in params or
                params['source_page'] is None):
            raise ValueError("Missing the required parameter `source_page` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if ('uid' not in params or
                params['uid'] is None):
            raise ValueError("Missing the required parameter `uid` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post`")  # noqa: E501
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post`")  # noqa: E501
        # verify the required parameter 'id_segment' is set
        if ('id_segment' not in params or
                params['id_segment'] is None):
            raise ValueError("Missing the required parameter `id_segment` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post`")  # noqa: E501
        # verify the required parameter 'id_issue' is set
        if ('id_issue' not in params or
                params['id_issue'] is None):
            raise ValueError("Missing the required parameter `id_issue` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_comments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501
        if 'id_segment' in params:
            path_params['id_segment'] = params['id_segment']  # noqa: E501
        if 'id_issue' in params:
            path_params['id_issue'] = params['id_issue']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'comment' in params:
            form_params.append(('comment', params['comment']))  # noqa: E501
        if 'id_qa_entry' in params:
            form_params.append(('id_qa_entry', params['id_qa_entry']))  # noqa: E501
        if 'source_page' in params:
            form_params.append(('source_page', params['source_page']))  # noqa: E501
        if 'uid' in params:
            form_params.append(('uid', params['uid']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{id_job}/{password}/segments/{id_segment}/translation-issues/{id_issue}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_delete(self, id_job, password, id_segment, id_issue, **kwargs):  # noqa: E501
        """Delete a translation Issue  # noqa: E501

        Delete a translation Issue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_delete(id_job, password, id_segment, id_issue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :param str id_issue: The id of the issue (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_delete_with_http_info(id_job, password, id_segment, id_issue, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_delete_with_http_info(id_job, password, id_segment, id_issue, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_delete_with_http_info(self, id_job, password, id_segment, id_issue, **kwargs):  # noqa: E501
        """Delete a translation Issue  # noqa: E501

        Delete a translation Issue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_delete_with_http_info(id_job, password, id_segment, id_issue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :param str id_issue: The id of the issue (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_job', 'password', 'id_segment', 'id_issue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_delete`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_delete`")  # noqa: E501
        # verify the required parameter 'id_segment' is set
        if ('id_segment' not in params or
                params['id_segment'] is None):
            raise ValueError("Missing the required parameter `id_segment` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_delete`")  # noqa: E501
        # verify the required parameter 'id_issue' is set
        if ('id_issue' not in params or
                params['id_issue'] is None):
            raise ValueError("Missing the required parameter `id_issue` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501
        if 'id_segment' in params:
            path_params['id_segment'] = params['id_segment']  # noqa: E501
        if 'id_issue' in params:
            path_params['id_issue'] = params['id_issue']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{id_job}/{password}/segments/{id_segment}/translation-issues/{id_issue}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Issue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post(self, rebutted_at, id_job, password, id_segment, id_issue, **kwargs):  # noqa: E501
        """Update translation issues  # noqa: E501

        Update translation issues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post(rebutted_at, id_job, password, id_segment, id_issue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rebutted_at: (required)
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :param str id_issue: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post_with_http_info(rebutted_at, id_job, password, id_segment, id_issue, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post_with_http_info(rebutted_at, id_job, password, id_segment, id_issue, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post_with_http_info(self, rebutted_at, id_job, password, id_segment, id_issue, **kwargs):  # noqa: E501
        """Update translation issues  # noqa: E501

        Update translation issues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post_with_http_info(rebutted_at, id_job, password, id_segment, id_issue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rebutted_at: (required)
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :param str id_issue: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rebutted_at', 'id_job', 'password', 'id_segment', 'id_issue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rebutted_at' is set
        if ('rebutted_at' not in params or
                params['rebutted_at'] is None):
            raise ValueError("Missing the required parameter `rebutted_at` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post`")  # noqa: E501
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post`")  # noqa: E501
        # verify the required parameter 'id_segment' is set
        if ('id_segment' not in params or
                params['id_segment'] is None):
            raise ValueError("Missing the required parameter `id_segment` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post`")  # noqa: E501
        # verify the required parameter 'id_issue' is set
        if ('id_issue' not in params or
                params['id_issue'] is None):
            raise ValueError("Missing the required parameter `id_issue` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_id_issue_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501
        if 'id_segment' in params:
            path_params['id_segment'] = params['id_segment']  # noqa: E501
        if 'id_issue' in params:
            path_params['id_issue'] = params['id_issue']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'rebutted_at' in params:
            form_params.append(('rebutted_at', params['rebutted_at']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{id_job}/{password}/segments/{id_segment}/translation-issues/{id_issue}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post(self, version_number, id_segment2, id_job2, id_category, severity, translation_version, target_text, start_node, start_offset, end_node, end_offset, is_full_segment, comment, id_job, password, id_segment, **kwargs):  # noqa: E501
        """Create translation issues  # noqa: E501

        Create translation issues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post(version_number, id_segment2, id_job2, id_category, severity, translation_version, target_text, start_node, start_offset, end_node, end_offset, is_full_segment, comment, id_job, password, id_segment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_number: (required)
        :param str id_segment2: (required)
        :param str id_job2: (required)
        :param str id_category: (required)
        :param str severity: (required)
        :param str translation_version: (required)
        :param str target_text: (required)
        :param str start_node: (required)
        :param str start_offset: (required)
        :param str end_node: (required)
        :param str end_offset: (required)
        :param str is_full_segment: (required)
        :param str comment: (required)
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post_with_http_info(version_number, id_segment2, id_job2, id_category, severity, translation_version, target_text, start_node, start_offset, end_node, end_offset, is_full_segment, comment, id_job, password, id_segment, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post_with_http_info(version_number, id_segment2, id_job2, id_category, severity, translation_version, target_text, start_node, start_offset, end_node, end_offset, is_full_segment, comment, id_job, password, id_segment, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post_with_http_info(self, version_number, id_segment2, id_job2, id_category, severity, translation_version, target_text, start_node, start_offset, end_node, end_offset, is_full_segment, comment, id_job, password, id_segment, **kwargs):  # noqa: E501
        """Create translation issues  # noqa: E501

        Create translation issues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post_with_http_info(version_number, id_segment2, id_job2, id_category, severity, translation_version, target_text, start_node, start_offset, end_node, end_offset, is_full_segment, comment, id_job, password, id_segment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_number: (required)
        :param str id_segment2: (required)
        :param str id_job2: (required)
        :param str id_category: (required)
        :param str severity: (required)
        :param str translation_version: (required)
        :param str target_text: (required)
        :param str start_node: (required)
        :param str start_offset: (required)
        :param str end_node: (required)
        :param str end_offset: (required)
        :param str is_full_segment: (required)
        :param str comment: (required)
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :param str id_segment: The id of the segment (required)
        :return: Issue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_number', 'id_segment2', 'id_job2', 'id_category', 'severity', 'translation_version', 'target_text', 'start_node', 'start_offset', 'end_node', 'end_offset', 'is_full_segment', 'comment', 'id_job', 'password', 'id_segment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_number' is set
        if ('version_number' not in params or
                params['version_number'] is None):
            raise ValueError("Missing the required parameter `version_number` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'id_segment2' is set
        if ('id_segment2' not in params or
                params['id_segment2'] is None):
            raise ValueError("Missing the required parameter `id_segment2` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'id_job2' is set
        if ('id_job2' not in params or
                params['id_job2'] is None):
            raise ValueError("Missing the required parameter `id_job2` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'id_category' is set
        if ('id_category' not in params or
                params['id_category'] is None):
            raise ValueError("Missing the required parameter `id_category` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'severity' is set
        if ('severity' not in params or
                params['severity'] is None):
            raise ValueError("Missing the required parameter `severity` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'translation_version' is set
        if ('translation_version' not in params or
                params['translation_version'] is None):
            raise ValueError("Missing the required parameter `translation_version` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'target_text' is set
        if ('target_text' not in params or
                params['target_text'] is None):
            raise ValueError("Missing the required parameter `target_text` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'start_node' is set
        if ('start_node' not in params or
                params['start_node'] is None):
            raise ValueError("Missing the required parameter `start_node` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'start_offset' is set
        if ('start_offset' not in params or
                params['start_offset'] is None):
            raise ValueError("Missing the required parameter `start_offset` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'end_node' is set
        if ('end_node' not in params or
                params['end_node'] is None):
            raise ValueError("Missing the required parameter `end_node` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'end_offset' is set
        if ('end_offset' not in params or
                params['end_offset'] is None):
            raise ValueError("Missing the required parameter `end_offset` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'is_full_segment' is set
        if ('is_full_segment' not in params or
                params['is_full_segment'] is None):
            raise ValueError("Missing the required parameter `is_full_segment` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'comment' is set
        if ('comment' not in params or
                params['comment'] is None):
            raise ValueError("Missing the required parameter `comment` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501
        # verify the required parameter 'id_segment' is set
        if ('id_segment' not in params or
                params['id_segment'] is None):
            raise ValueError("Missing the required parameter `id_segment` when calling `api_v2_jobs_id_job_password_segments_id_segment_translation_issues_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501
        if 'id_segment' in params:
            path_params['id_segment'] = params['id_segment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'version_number' in params:
            form_params.append(('version_number', params['version_number']))  # noqa: E501
        if 'id_segment' in params:
            form_params.append(('id_segment', params['id_segment']))  # noqa: E501
        if 'id_job' in params:
            form_params.append(('id_job', params['id_job']))  # noqa: E501
        if 'id_category' in params:
            form_params.append(('id_category', params['id_category']))  # noqa: E501
        if 'severity' in params:
            form_params.append(('severity', params['severity']))  # noqa: E501
        if 'translation_version' in params:
            form_params.append(('translation_version', params['translation_version']))  # noqa: E501
        if 'target_text' in params:
            form_params.append(('target_text', params['target_text']))  # noqa: E501
        if 'start_node' in params:
            form_params.append(('start_node', params['start_node']))  # noqa: E501
        if 'start_offset' in params:
            form_params.append(('start_offset', params['start_offset']))  # noqa: E501
        if 'end_node' in params:
            form_params.append(('end_node', params['end_node']))  # noqa: E501
        if 'end_offset' in params:
            form_params.append(('end_offset', params['end_offset']))  # noqa: E501
        if 'is_full_segment' in params:
            form_params.append(('is_full_segment', params['is_full_segment']))  # noqa: E501
        if 'comment' in params:
            form_params.append(('comment', params['comment']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{id_job}/{password}/segments/{id_segment}/translation-issues', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Issue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_id_job_password_translation_issues_get(self, id_job, password, **kwargs):  # noqa: E501
        """Project translation issues  # noqa: E501

        Project translation issues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_translation_issues_get(id_job, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :return: TranslationIssues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_id_job_password_translation_issues_get_with_http_info(id_job, password, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_id_job_password_translation_issues_get_with_http_info(id_job, password, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_id_job_password_translation_issues_get_with_http_info(self, id_job, password, **kwargs):  # noqa: E501
        """Project translation issues  # noqa: E501

        Project translation issues  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_id_job_password_translation_issues_get_with_http_info(id_job, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_job: The id of the job (required)
        :param str password: The password of the job (Translate password) (required)
        :return: TranslationIssues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_job', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_id_job_password_translation_issues_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_job' is set
        if ('id_job' not in params or
                params['id_job'] is None):
            raise ValueError("Missing the required parameter `id_job` when calling `api_v2_jobs_id_job_password_translation_issues_get`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `api_v2_jobs_id_job_password_translation_issues_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_job' in params:
            path_params['id_job'] = params['id_job']  # noqa: E501
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{id_job}/{password}/translation-issues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TranslationIssues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
